<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on takuti.me</title>
    <link>http://localhost:1313/tags/development/</link>
    <description>Recent content in Development on takuti.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 25 Jan 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>TF-IDFで文書内の単語の重み付け</title>
      <link>http://localhost:1313/note/tf-idf/</link>
      <pubDate>Sat, 25 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/note/tf-idf/</guid>
      <description>&lt;p&gt;『いくつかの文書があったとき、それぞれの文書を特徴付ける単語はどれだろう？』こんなときに使われるのがTF-IDFという値。&lt;br /&gt;
&lt;!--more--&gt;&lt;br /&gt;
TFはTerm Frequencyで、それぞれの単語の文書内での出現頻度を表します。&lt;strong&gt;たくさん出てくる単語ほど重要！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;\[&lt;br /&gt;
\displaystyle tf(t,d) = \frac{n_{t,d}}{\sum_{s \in d}n_{s,d}}&lt;br /&gt;
\]&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;\(tf(t,d)\)&lt;/dt&gt;
&lt;dd&gt;文書\(d\)内のある単語\(t\)のTF値&lt;/dd&gt;
&lt;dt&gt;\(n_{t,d}\)&lt;/dt&gt;
&lt;dd&gt;ある単語\(t\)の文書\(d\)内での出現回数&lt;/dd&gt;
&lt;dt&gt;\(\sum_{s \in d}n_{s,d}\)&lt;/dt&gt;
&lt;dd&gt;文書\(d\)内のすべての単語の出現回数の和&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;IDFはInverse Document Frequencyで、それぞれの単語がいくつの文書内で共通して使われているかを表します。&lt;strong&gt;いくつもの文書で横断的に使われている単語はそんなに重要じゃない！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;\[&lt;br /&gt;
\displaystyle idf(t) = \log{\frac{N}{df(t)}} + 1&lt;br /&gt;
\]&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;\(idf(t)\)&lt;/dt&gt;
&lt;dd&gt;ある単語\(t\)のIDF値&lt;/dd&gt;
&lt;dt&gt;\(N\)&lt;/dt&gt;
&lt;dd&gt;全文書数&lt;/dd&gt;
&lt;dt&gt;\(df(t)\)&lt;/dt&gt;
&lt;dd&gt;ある単語\(t\)が出現する文書の数&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;対数をとっているのは、文書数の規模に応じた値の変化を小さくするためなんだとか。&lt;/p&gt;
&lt;p&gt;この2つの値を掛けたものをそれぞれの単語の重みにすれば、その値が大きいほど各文書を特徴付ける単語だと言えるんじゃないか、という話。&lt;/p&gt;
&lt;p&gt;例えば10日分のアメリカ旅行の日記で全体を通して「アメリカ」という単語が多く登場していてもそれは当然のこと。1日目の日記を特徴づけるのは「飛行機」であって欲しいし、2日目は「ハンバーガー」であって欲しいわけです。&lt;/p&gt;
&lt;p&gt;頻出する単語だからその文書を特徴付ける単語になる！とは限らない。そこでTF-IDFの登場。&lt;/p&gt;
&lt;h3&gt;具体例で見てみる&lt;/h3&gt;
&lt;p&gt;具体的な例として以下の記事を参考に、２つの文書『&lt;strong&gt;リンゴとレモンとレモン&lt;/strong&gt;』（文書A）と『&lt;strong&gt;リンゴとミカン&lt;/strong&gt;』（文書B）を考えます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://kitsunemimi9.blog89.fc2.com/blog-entry-20.html&#34;&gt;フツーって言うなぁ！ Pythonでtf-idf法を実装してみた&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;形態素解析を行うとき、特徴語になり得るのは名詞だけだと仮定して、それ以外の品詞は無視します。つまり文書Aは &lt;strong&gt;[リンゴ, レモン, レモン]&lt;/strong&gt; 、文書Bは &lt;strong&gt;[リンゴ, ミカン]&lt;/strong&gt; という単語の集合。&lt;/p&gt;
&lt;p&gt;\(\displaystyle  tf(リンゴ,文書A) = \frac{1}{3} = 0.33\)&lt;/p&gt;
&lt;p&gt;\(\displaystyle  tf(レモン,文書A) = \frac{2}{3} = 0.66\)&lt;br /&gt;
&lt;br&gt;&amp;nbsp;&lt;br /&gt;
\(\displaystyle  tf(リンゴ,文書B) = \frac{1}{2} = 0.5\)&lt;/p&gt;
&lt;p&gt;\(\displaystyle  tf(ミカン,文書B) = \frac{1}{2} = 0.5\)&lt;br /&gt;
&lt;br&gt;&amp;nbsp;&lt;br /&gt;
\(\displaystyle  idf(リンゴ) = \log{\frac{2}{2}} + 1 = 1\)&lt;/p&gt;
&lt;p&gt;\(\displaystyle  idf(レモン) = \log{\frac{2}{1}} + 1 = 1.3\)&lt;/p&gt;
&lt;p&gt;\(\displaystyle  idf(ミカン) = \log{\frac{2}{1}} + 1 = 1.3\)&lt;/p&gt;
&lt;p&gt;すると上記のようにTF値とIDF値がそれぞれ計算できて、積を求めれば、&lt;/p&gt;
&lt;p&gt;\(tf(リンゴ,文書A)*idf(リンゴ) = 0.33\)&lt;br /&gt;
\(tf(レモン,文書A)*idf(レモン) = 0.858\)&lt;/p&gt;
&lt;p&gt;\(tf(リンゴ,文書B)*idf(リンゴ) = 0.5\)&lt;br /&gt;
\(tf(ミカン,文書B)*idf(ミカン) = 0.65\)&lt;/p&gt;
&lt;p&gt;両方の文書に登場している「リンゴ」という単語は、片方にしか登場していない「レモン」や「ミカン」よりも特徴語としての重みは小さいことが数値的に分かります。&lt;/p&gt;
&lt;p&gt;実装はRubyです。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/takuti/Lab/blob/master/tf_idf.rb&#34;&gt;takuti / Lab / tf_idf.rb&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;p&gt;徳永, &#34;情報検索と言語処理&#34;, 東京大学出版会, pp. 27-28, 1999.&lt;/p&gt;
&lt;div class=&#34;booklink-box&#34; style=&#34;text-align:left;padding-bottom:20px;font-size:small;/zoom: 1;overflow: hidden;&#34;&gt;
&lt;div class=&#34;booklink-image&#34; style=&#34;float:left;margin:0 15px 10px 0;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/asin/4130654055/takuti-22/&#34; name=&#34;booklink&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41YVARP4HPL._SL160_.jpg&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&#34;booklink-info&#34; style=&#34;line-height:120%;/zoom: 1;overflow: hidden;&#34;&gt;
&lt;div class=&#34;booklink-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/asin/4130654055/takuti-22/&#34; rel=&#34;nofollow&#34; name=&#34;booklink&#34; target=&#34;_blank&#34;&gt;情報検索と言語処理 (言語と計算)&lt;/a&gt;
&lt;div class=&#34;booklink-powered-date&#34; style=&#34;font-size:8pt;margin-top:5px;font-family:verdana;line-height:120%&#34;&gt;posted with &lt;a href=&#34;http://yomereba.com&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;ヨメレバ&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;booklink-detail&#34; style=&#34;margin-bottom:5px;&#34;&gt;徳永 健伸 東京大学出版会 1999-11    &lt;/div&gt;
&lt;div class=&#34;booklink-link2&#34; style=&#34;margin-top:10px;&#34;&gt;
&lt;div class=&#34;shoplinkamazon&#34; style=&#34;display:inline;margin-right:5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/asin/4130654055/takuti-22/&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34; title=&#34;アマゾン&#34; &gt;Amazon&lt;/a&gt;&lt;/div&gt;
&lt;div class=&#34;shoplinkkindle&#34; style=&#34;display:inline;margin-right:5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/search?keywords=%8F%EE%95%F1%8C%9F%8D%F5%82%C6%8C%BE%8C%EA%8F%88%97%9D%20%28%8C%BE%8C%EA%82%C6%8Cv%8EZ%29&amp;__mk_ja_JP=%83J%83%5E%83J%83i&amp;url=node%3D2275256051&amp;tag=takuti-22&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34; &gt;Kindle&lt;/a&gt;&lt;/div&gt;
&lt;div class=&#34;shoplinkrakuten&#34; style=&#34;display:inline;margin-right:5px&#34;&gt;&lt;a href=&#34;http://hb.afl.rakuten.co.jp/hgc/10952997.eae88ca3.10952998.38cdd415/?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F1112471%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34; title=&#34;楽天ブックス&#34; &gt;楽天ブックス&lt;/a&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;booklink-footer&#34; style=&#34;clear: left&#34;&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>マルコフ連鎖によるツイートの文字数を考える</title>
      <link>http://localhost:1313/note/twitter-bot-tweet-length/</link>
      <pubDate>Wed, 25 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/note/twitter-bot-tweet-length/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.takuti.me/twitter-bot/&#34;&gt;マルコフ連鎖でbotを作った&lt;/a&gt;けどちょっとお粗末な発言が多い。&lt;/p&gt;
&lt;p&gt;https://twitter.com/yootakuti/status/413693204735606784&lt;/p&gt;
&lt;p&gt;やる気が感じられない。つなげりゃいいってもんじゃあない。&lt;/p&gt;
&lt;p&gt;というわけで、生成するツイートの文字数に上限を設けてしまえば少なくとも上のようなぶっ飛んだ発言はなくなるだろうという考えの下に対策を施します。&lt;/p&gt;
&lt;p&gt;もちろん対策前の上限はツイートの最高文字数である140文字です。これを何文字に制限しようか。&lt;br /&gt;
&lt;!--more--&gt;&lt;br /&gt;
とりあえず僕自身 @&lt;a href=&#34;https://twitter.com/takuti/&#34;&gt;takuti&lt;/a&gt; のツイートの文字数がどんな感じになっているのか調べます。対象は過去47,812ツイート。&lt;/p&gt;
&lt;p&gt;各ツイートには以下の様な前処理をかけています。&lt;/p&gt;
&lt;pre class=&#34;prettyprint ruby&#34;&gt;
# リプライをすべて削除
tweet = tweet.gsub(/\.?\s*@[0-9A-Za-z_]+/, &#39;&#39;)
# RT/QT以降行末まで削除
tweet = tweet.gsub(/(RT|QT)\s*@?[0-9A-Za-z_]+.*$/, &#39;&#39;)
# URLを削除 スペースが入るまで消える
tweet = tweet.gsub(/http:\/\/\S+/, &#39;&#39;)
# ハッシュタグを削除
tweet = tweet.gsub(/#[0-9A-Za-z_]+/, &#39;&#39;)
&lt;/pre&gt;
&lt;p&gt;ツイートデータをダウンロードして前処理を行った後の文字数をそれぞれ数えてgnuplotでヒストグラムにすると以下のような結果に。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/wp/source-e1387890887456.png&#34; alt=&#34;source&#34; width=&#34;500&#34; height=&#34;375&#34; class=&#34;alignnone size-full wp-image-395&#34; /&gt;&lt;/p&gt;
&lt;p&gt;この結果から、僕のツイートは80%が30文字以内、90%が40文字以内であることが分かります。&lt;/p&gt;
&lt;p&gt;一方、マルコフ連鎖で生成したツイートの文字数はどうでしょうか。&lt;/p&gt;
&lt;p&gt;@&lt;a href=&#34;https://twitter.com/takuti/&#34;&gt;takuti&lt;/a&gt; のツイート数に合わせて、47,812個のサンプルツイートをマルコフ連鎖で生成します。デーモンを作って1日回しておけばOKです。そこから文字数のヒストグラムを作ると、&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/wp/markov-e1387896201933.png&#34; alt=&#34;markov&#34; width=&#34;500&#34; height=&#34;375&#34; class=&#34;alignnone size-full wp-image-396&#34; /&gt;&lt;/p&gt;
&lt;p&gt;ここまで綺麗な形になるとは思っていませんでしたが、やはり40文字以上の長いツイートが@&lt;a href=&#34;https://twitter.com/takuti/&#34;&gt;takuti&lt;/a&gt;より多いことが分かり、文字数の少ないツイートをもっと増やしたい感じですね。&lt;/p&gt;
&lt;p&gt;とまぁこんな結果が見れて満足したところで、今はマルコフ連鎖によるツイート生成の文字数上限を40文字に設定した上でbotを稼働させています。単純に、@&lt;a href=&#34;https://twitter.com/takuti/&#34;&gt;takuti&lt;/a&gt; のツイートの90%が40文字以内ですからね。&lt;/p&gt;
&lt;p&gt;短い発言なら支離滅裂でも結構なんとかなっちゃうものです。&lt;/p&gt;
&lt;p&gt;https://twitter.com/yootakuti/status/415369180116811777&lt;/p&gt;
&lt;p&gt;以上！&lt;del datetime=&#34;2013-12-25T04:18:49+00:00&#34;&gt;ヒストグラムにした意味は果たしてあったのか。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;『&lt;strong&gt;いかに知的な発言をさせるか&lt;/strong&gt;』よりも前に、まずは『&lt;strong&gt;いかに知的っぽく見せることができるか&lt;/strong&gt;』という点を少しでもシンプルな方法で模索したいですね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WordPressテーマの断捨離カスタマイズ #Stinger-WP</title>
      <link>http://localhost:1313/note/stinger-advent-calendar-2013/</link>
      <pubDate>Thu, 12 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/note/stinger-advent-calendar-2013/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.adventar.org/calendars/90&#34;&gt;&lt;img src=&#34;http://localhost:1313/images/wp/Advent_black_a.jpg&#34; alt=&#34;Advent_black_a&#34; width=&#34;580&#34; height=&#34;116&#34; class=&#34;alignnone size-full wp-image-390&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;こんにちは！&lt;a href=&#34;http://www.adventar.org/calendars/90&#34;&gt;Stinger Advent Calendar 2013&lt;/a&gt; 12日目を担当します、たくちです。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://stinger3.com/&#34;&gt;Stinger&lt;/a&gt;には良いところがたくさんありますが、簡潔で見通しのいいマークアップのおかげでカスタマイズしやすいというのが僕は特に嬉しいです。&lt;/p&gt;
&lt;p&gt;僕がStingerをカスタマイズする上で意識しているのは、できるだけ構成要素を減らすこと。&lt;strong&gt;初期状態でも十分な機能を備えているStingerだからこそ、カスタマイズの際は機能を増やすだけじゃなくて削ぎ落とすことも重要&lt;/strong&gt;だと思うわけです。&lt;/p&gt;
&lt;p&gt;というわけで断捨離カスタマイズです。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;h3&gt;減らすことも立派なカスタマイズです&lt;/h3&gt;
&lt;p&gt;まず断捨離とはそもそも何か、&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E6%96%AD%E6%8D%A8%E9%9B%A2&#34;&gt;Wikipedia先生に聞いてみましょう&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
断捨離（だんしゃり）とは、不要なモノなどの数を減らし、生活や人生に調和をもたらそうとする生活術や処世術のこと。&lt;br /&gt;
（中略）&lt;br /&gt;
断＝入ってくる要らない物を断つ&lt;br /&gt;
捨＝家にずっとある要らない物を捨てる&lt;br /&gt;
離＝物への執着から離れる
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;これをこのように読み替えます。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;断＝入ってくる「便利かも」な機能を断つ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;それが本当に必要な機能か慎重に見極めましょう。旅行の荷物で「使うかも」とあれもこれも持って行ったけど結局使わなかった、という経験ありませんか？無意識にいろいろ導入しているといつの間にか肥大化しています。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;捨＝ずっとあるけど実は無くても困らない機能を捨てる&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;あって当たり前な機能もその価値を一度疑ってみましょう。サイドバーの検索窓、広告やタグなど、実は無くたって困らないのかもしれません。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;離＝便利な機能への執着から離れる&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;便利だから使う、というだけではなく『減らす』という可能性も常に頭の片隅に置いてカスタマイズしてみましょう。&lt;/p&gt;
&lt;p&gt;どんな機能は不要なのか、それはみなさんがどんなブログを目指すのかに依ると思います。&lt;strong&gt;自分のブログの色&lt;/strong&gt;をぜひ一度考えてみてください。カスタマイズはそれからです。&lt;/p&gt;
&lt;p&gt;僕はこのブログを、PV数や広告収入を意識しすぎずに書きたいことを書く自己満足の場にしたいと思っています。そしてその副産物として、誰か1人でも記事を読んで何か感じてくれれば十分だな、と。&lt;/p&gt;
&lt;p&gt;だからたとえSEOや直帰率に多少影響してしまおうと、自分が客観的に見て必要だと思う機能だけを置いて、無知ながらもシンプルっぽいデザインにしたいという想いの下にカスタマイズしています。まぁ、&lt;strong&gt;過度にSEOを意識しなくていいという心理的な負担の少なさはやっぱりStingerさまさま&lt;/strong&gt;ですね！&lt;/p&gt;
&lt;p&gt;みなさんのブログはどんなブログですか？アフィリエイトでバンバン稼ぎたいですか？有益な情報を毎日一人でも多くの人に発信したいですか？&lt;/p&gt;
&lt;p&gt;もちろん機能が少なければ少ないほど良いというわけではありませんし、アフィリエイト目的のブログで広告を断捨離なんかしたら論外でしょう。しかし&lt;strong&gt;ブログをあなたの思う色に近づけるために必要なのは、もしかしたら適度な断捨離なのかも&lt;/strong&gt;しれません。&lt;/p&gt;
&lt;p&gt;WordPressで既存のテーマを使うと、どうしても機能1つ1つに集中してしまってブログ全体を見ることを忘れがちです。素晴らしく扱いやすく実用的なStingerというテーマだからこそ、カスタマイズのあり方について少し立ち止まって考えてみてはいかがでしょうか！&lt;br /&gt;
&lt;br&gt;&amp;nbsp;&lt;br /&gt;
さて、言いたかったことはひと通り語ったので最後にさらっとこのブログのStingerカスタマイズで断捨離したところをまとめて締めたいと思います。&lt;/p&gt;
&lt;h3&gt;サイドバーのNEW ENTRYを削除&lt;/h3&gt;
&lt;p&gt;ブログ内のどのページでも（だいたい）同じものが表示されるサイドバー。&lt;strong&gt;ブログの顔といっても過言ではないこの部分がごちゃごちゃしているのは個人的には避けたかった&lt;/strong&gt;です。&lt;/p&gt;
&lt;p&gt;というわけで、このブログで最近の投稿をアピールしたい理由が特に無いのでNEW ENTRYは削除しました。&lt;strong&gt;sidebar.php&lt;/strong&gt;の　&amp;lt;!--最近のエントリ--&amp;gt;　から　&amp;lt;!--/最近のエントリ--&amp;gt;　までを削除（コメントアウト）するだけです。&lt;/p&gt;
&lt;p&gt;Stingerはデフォルトで各記事の下に関連記事を出してくれるので、ある記事に対する訪問者の直帰率を下げたいのであればそれと&lt;a href=&#34;http://wordpress.org/plugins/wordpress-popular-posts/&#34;&gt;Popular Posts&lt;/a&gt;の設置で十分かなーと思っています。&lt;/p&gt;
&lt;h3&gt;サイドバーのスクロール追尾広告をタブ型コンテンツエリアに&lt;/h3&gt;
&lt;p&gt;スクロールで広告が追いかけてくるのはちょっと露骨でこのブログの目指すところではありません。&lt;/p&gt;
&lt;p&gt;そこで、その部分をタブ型のコンテンツエリアにしました。こうすればより多くのブログ内コンテンツを効率的に訪問者に届けることができる（かも）。めざせ収納上手！&lt;br /&gt;
&lt;img src=&#34;http://localhost:1313/images/wp/Screen-Shot-2013-12-10-at-11.34.17-PM.png&#34; alt=&#34;Screen Shot 2013-12-10 at 11.34.17 PM&#34; width=&#34;357&#34; height=&#34;407&#34; class=&#34;alignnone size-full wp-image-391&#34; /&gt;&lt;br /&gt;
&lt;a href=&#34;http://wordpress.org/plugins/wordpress-popular-posts/&#34;&gt;Popular Posts&lt;/a&gt;とカテゴリ一覧、あと技術ネタの記事にだけ付けているタグの一覧を表示しています。&lt;/p&gt;
&lt;p&gt;一応コードを貼っておきますね。&lt;strong&gt;sidebar.php&lt;/strong&gt;の最下部です。詳しい解説は以下のものが分かりやすいのでここでは割愛。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://kachibito.net/web-design/jquery-tab-tutorial.html&#34;&gt;jQuery事始めvol.3・プラグインに頼らず自分でクリックで切り替わるタブメニューを作ってみる - かちびと.net&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;prettyprint lang-html&#34;&gt;
&amp;lt;!--アドセンス--&amp;gt;
&amp;lt;div id=&amp;quot;ad1&amp;quot;&amp;gt;
 &amp;lt;div&amp;gt;
  &amp;lt;ul class=&amp;quot;tab clearfix&amp;quot;&amp;gt; &amp;lt;!--タブを作成--&amp;gt;
   &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#tab1&amp;quot;&amp;gt;人気&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
   &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#tab2&amp;quot;&amp;gt;カテゴリ&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
   &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#tab3&amp;quot;&amp;gt;研究・開発タグ&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
  &amp;lt;div class=&amp;quot;tab-content&amp;quot;&amp;gt; &amp;lt;!--各タブの中身を作成--&amp;gt;
   &amp;lt;div class=&amp;quot;area&amp;quot; id=&amp;quot;tab1&amp;quot;&amp;gt;
    &amp;lt;!--スクロール広告用のウィジェットエリアにはPopularPostsを登録--&amp;gt;
    &amp;lt;?php get_template_part(&amp;#039;scroll-ad&amp;#039;);?&amp;gt;
   &amp;lt;/div&amp;gt;
   &amp;lt;div class=&amp;quot;area&amp;quot; id=&amp;quot;tab2&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;list-categories&amp;quot;&amp;gt;
     &amp;lt;!--カテゴリ一覧--&amp;gt;
     &amp;lt;?php wp_list_categories(&amp;#039;orderby=count&amp;amp;order=DESC&amp;amp;title_li=&amp;amp;show_count=1&amp;#039;); ?&amp;gt;
    &amp;lt;/ul&amp;gt;
   &amp;lt;/div&amp;gt;
   &amp;lt;div class=&amp;quot;area&amp;quot; id=&amp;quot;tab3&amp;quot;&amp;gt;
    &amp;lt;h4&amp;gt;研究・開発エントリの中身です&amp;lt;/h4&amp;gt;
    &amp;lt;!--タグ一覧--&amp;gt;
    &amp;lt;?php wp_tag_cloud(&amp;#039;smallest=13&amp;amp;largest=13&amp;amp;unit=px&amp;amp;number=0&amp;amp;orderby=count&amp;amp;order=DESC&amp;#039;); ?&amp;gt;
   &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;script&amp;gt;
$(document).ready(function() {

 // カテゴリ一覧でカテゴリ説明文を一緒に表示するための処理
 $(&amp;#039;.list-categories li&amp;#039;).each(function(){
  var title = $(this).find(&amp;#039;a&amp;#039;).attr(&amp;#039;title&amp;#039;);
  $(this).append(&amp;quot;&amp;lt;br /&amp;gt;&amp;lt;p class=&amp;#039;category-description&amp;#039;&amp;gt;&amp;quot;+title+&amp;quot;&amp;lt;/p&amp;gt;&amp;quot;);
 });

 // タブコンテンツの切り替え処理
 $(&amp;#039;.area&amp;#039;).hide();
 $(&amp;#039;.area:first&amp;#039;).show();
 $(&amp;#039;.tab li:first&amp;#039;).addClass(&amp;#039;active&amp;#039;);
 var $tbl = $(&amp;#039;.tab li&amp;#039;);

 $tbl.click(function() {
  $tbl.removeClass(&amp;#039;active&amp;#039;);
  $(this).addClass(&amp;#039;active&amp;#039;);
  $(&amp;#039;.area&amp;#039;).hide();

  var $ath = $(this).find(&amp;#039;a&amp;#039;).attr(&amp;#039;href&amp;#039;);

  $($ath).fadeIn();
  return false;
 });
});
&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;p&gt;カテゴリ一覧でカテゴリの説明文を一緒に表示しているところがポイントです。&lt;/p&gt;
&lt;h3&gt;SNSボタンの削除&lt;/h3&gt;
&lt;p&gt;初期状態でStingerに付いている画面左下のSNSボタンは現在削除しています。これはStingerに限った話ではないのですが、SNSボタン独特の既成品感が全体をみたときに浮いてしまって好きじゃないので、設置するなら自分で改めて実装しようと思っていました。&lt;/p&gt;
&lt;p&gt;これはStinger Advent Calendar 6日目の以下の記事も参考にしつつ、いずれ再設置します！&lt;br /&gt;
&lt;a href=&#34;http://ideabb.jp/stinger-advent-calender2013-6&#34;&gt;最高のWordPressテーマStingerのSNSボタンを軽量化する。#Stinger-WP|アイディア・ボード&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;『ちょっと良いモノ』を使う&lt;/h3&gt;
&lt;p&gt;断捨離をして整った生活をするためには、良いモノを長く使うことも大切だと思います。&lt;/p&gt;
&lt;p&gt;というわけでカスタマイズのときも『&lt;strong&gt;ちょっと良いモノ&lt;/strong&gt;』を意識してみては？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ブログタイトルのフォントには&lt;a href=&#34;http://www.google.com/fonts&#34;&gt;Webフォント&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;検索窓には&lt;a href=&#34;https://www.google.co.jp/cse/?hl=ja&#34;&gt;Googleカスタム検索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;コードの記述には&lt;a href=&#34;https://code.google.com/p/google-code-prettify/&#34;&gt;Google Code Prettify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;コメント欄には&lt;a href=&#34;http://disqus.com/&#34;&gt;Disqus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このブログで導入しているのは上記のようなものです。&lt;/p&gt;
&lt;p&gt;これらが『ちょっと良いモノ』かどうかは完全に僕の主観ですが、断捨離でひと通り整理した後は残っている機能をより良くすることも大切ですね。&lt;br /&gt;
&lt;br&gt;&amp;nbsp;&lt;br /&gt;
はい、これくらい書ければそろそろ僕も満足です。WordPressに関して長く語ったことはこれまでなかったので、いい機会になりました。&lt;/p&gt;
&lt;p&gt;僕は基本的に常に迷っている人間ですので、この先も当分Stingerを使い続けるとは思いますがデザインはころころと変わると思います。現時点でまだ弄りたい部分がいくつか残っていたりもします。そんなとき、常に『このブログの色』を意識した断捨離カスタマイズをしていきたいと思うわけであります。あと意識するのはほんのちょっとの解析結果。&lt;/p&gt;
&lt;p&gt;最後の最後になってしまいましたが、Stingerという素敵なテーマを作ってくださった&lt;a href=&#34;http://rentalhomepage.com/&#34;&gt;ENJIさん&lt;/a&gt;、そしてStinger Advent Calendarを企画してくださった&lt;a href=&#34;http://scope.minibird.jp/niji-life/&#34;&gt;mamiさん&lt;/a&gt;、本当にありがとうございました！&lt;/p&gt;
&lt;p&gt;冒頭でStingerには良いところがたくさんあると書きましたが、一番良いところは&lt;strong&gt;テーマ1つでこれだけの人が繋がることができる&lt;/strong&gt;というところだと思います。すばらっ。&lt;/p&gt;
&lt;p&gt;というわけでStinger Advent Calendar 12日目でした。&lt;/p&gt;
&lt;p&gt;明日の担当はコジローさんです。よろしくお願いします！&lt;/p&gt;
&lt;h3&gt;追記：トップページのサムネイル画像の削除&lt;/h3&gt;
&lt;p&gt;コメントで質問を頂いたので、トップページのサムネイル画像を削除する方法を追記します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/wp/sumbox_true-e1387944685166.png&#34; alt=&#34;sumbox_true&#34; width=&#34;500&#34; height=&#34;501&#34; class=&#34;alignnone size-full wp-image-402&#34; /&gt;&lt;/p&gt;
&lt;p&gt;トップページのコードはStingerテーマ中の&lt;strong&gt;home.php&lt;/strong&gt;に書かれています。このうち、サムネイル画像を出力しているのは&lt;em&gt;&lt;strong&gt;sumbox&lt;/strong&gt;&lt;/em&gt;というクラスのついたdivになります。&lt;/p&gt;
&lt;pre class=&#34;prettyprint lang-php&#34;&gt;
&amp;lt;div class=&amp;quot;sumbox&amp;quot;&amp;gt; &amp;lt;a href=&amp;quot;&amp;lt;?php the_permalink() ?&amp;gt;&amp;quot; title=&amp;quot;&amp;lt;?php the_title_attribute(); ?&amp;gt;&amp;quot;&amp;gt;
&amp;lt;?php if ( has_post_thumbnail() ): // サムネイルを持っているときの処理 ?&amp;gt;
&amp;lt;?php
$title= get_the_title();
the_post_thumbnail(array( 150,150 ), array( &amp;#039;alt&amp;#039; =&amp;gt;$title, &amp;#039;title&amp;#039; =&amp;gt; $title)); ?&amp;gt;
&amp;lt;?php else: // サムネイルを持っていないときの処理 ?&amp;gt;
&amp;lt;img src=&amp;quot;&amp;lt;?php echo get_template_directory_uri(); ?&amp;gt;/images/no-img.png&amp;quot; alt=&amp;quot;no image&amp;quot; title=&amp;quot;no image&amp;quot; width=&amp;quot;150&amp;quot; height=&amp;quot;150&amp;quot; /&amp;gt;
&amp;lt;?php endif; ?&amp;gt;
&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt;
&amp;lt;!-- /.sumbox --&amp;gt;
&lt;/pre&gt;
&lt;p&gt;これですね。この部分を削除/コメントアウトすると、トップページからサムネイル画像が消えます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/wp/sumbox_false-e1387944701660.png&#34; alt=&#34;sumbox_false&#34; width=&#34;500&#34; height=&#34;491&#34; class=&#34;alignnone size-full wp-image-403&#34; /&gt;&lt;/p&gt;
&lt;p&gt;これだけだとさっきまでサムネイルのあったところが空白になってしまって不格好なので、最後にCSSをいじって仕上げます。&lt;strong&gt;style.css&lt;/strong&gt;の&lt;/p&gt;
&lt;pre class=&#34;prettyprint lang-css&#34;&gt;
.sumbox {
  float: left;
  height: 150px;
  width: 150px;
}
.post .entry .entry-content {
  float: right;
  width: 380px;
  padding-left: 20px;
}
&lt;/pre&gt;
&lt;p&gt;この部分を削除してしまいます。すると、&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/wp/sumbox_delete-e1387944668265.png&#34; alt=&#34;sumbox_delete&#34; width=&#34;500&#34; height=&#34;455&#34; class=&#34;alignnone size-full wp-image-401&#34; /&gt;&lt;/p&gt;
&lt;p&gt;サムネイルが完全に消えてイイ感じになりました。もう少し手を加えるのであれば、表示している文章の量でしょうか。&lt;/p&gt;
&lt;p&gt;今のままだと、100文字でぶっつりと切られてしまっています。これは先程もいじった&lt;strong&gt;home.php&lt;/strong&gt;の中にある&lt;/p&gt;
&lt;pre class=&#34;prettyprint lang-php&#34;&gt;
&amp;lt;p class=&amp;quot;dami&amp;quot;&amp;gt;&amp;lt;?php echo mb_substr( strip_tags( stinger_noshotcode( $post-&amp;gt;post_content ) ), 0, 100 ) . &amp;#039;&amp;#039;; ?&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;motto&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;more-link&amp;quot; href=&amp;quot;&amp;lt;?php the_permalink() ?&amp;gt;&amp;quot;&amp;gt;続きを見る&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&lt;/pre&gt;
&lt;p&gt;この部分を変更することで修正できます。「もう少し多くの文字数を表示したい！」という場合は、上記コードの&lt;strong&gt;100&lt;/strong&gt;を好きな文字数に書き換えればOKです。&lt;/p&gt;
&lt;p&gt;もしくは、このブログのように記事を書いた時に&lt;em&gt;&lt;strong&gt;&amp;lt;!--more--&amp;gt;&lt;/strong&gt;&lt;/em&gt;を入れたところまで表示したい場合は上記コードを以下のように書き換えることもできます。&lt;/p&gt;
&lt;pre class=&#34;prettyprint lang-php&#34;&gt;
&amp;lt;?php the_content(&amp;quot;&amp;lt;p class=\&amp;quot;motto\&amp;quot;&amp;gt;続きを見る&amp;lt;/p&amp;gt;&amp;quot;); ?&amp;gt;
&lt;/pre&gt;
&lt;p&gt;そんな感じです！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WordPressの新規投稿を決めた時間内でさっさと書かせるプラグイン</title>
      <link>http://localhost:1313/note/hurry-up-post/</link>
      <pubDate>Mon, 09 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/note/hurry-up-post/</guid>
      <description>&lt;p&gt;を作った。&lt;/p&gt;
&lt;p&gt;記事１つ書いただけなのにもうこんな時間！という経験ありませんか？あ、ない・・・そうですか。&lt;/p&gt;
&lt;p&gt;まぁ僕はいつもそんな感じなので構わず話を続けます。&lt;/p&gt;
&lt;p&gt;WordPressのプラグイン作成が気になったので、お試しついでにそんな問題を解決する（かもしれない）超簡単なプラグインを作りました。&lt;strong&gt;Hurry Up Post&lt;/strong&gt;というセンスの欠片も感じないネーミングです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/wp/Screen-Shot-2013-12-09-at-2.14.39-PM-e1386566110949.png&#34; alt=&#34;Screen Shot 2013-12-09 at 2.14.39 PM&#34; width=&#34;500&#34; height=&#34;154&#34; class=&#34;alignnone size-full wp-image-385&#34; /&gt;&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;新規投稿画面を開くとタイトル入力フィールドの下にこんなのが出ます。&lt;/li&gt;
&lt;li&gt;記事を書き上げたい時間を分単位で指定して、Startボタンをクリックすることでカウントダウンがスタートします。&lt;/li&gt;
&lt;li&gt;Stopボタンとか甘えたものはありません。自分の選択には責任を持ちましょう。&lt;/li&gt;
&lt;li&gt;カウントダウンが終了すると、クリックイベントで勝手に『公開』ボタンをクリックします。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;制限時間が表示されていることで効率的に記事をかけるようになる（かもしれない）。人間は追い込まれると謎の生産性を発揮するものです。&lt;/p&gt;
&lt;p&gt;この記事は30分以内で書き上げたいと思いました。何とかなりそうです。時間を意識することは大切ですね。&lt;/p&gt;
&lt;p&gt;プラグインはとりあえずgithubに上げています。使いたいという稀有な方がいましたら、ダウンロードしてWordPressのインストールディレクトリ内 &lt;strong&gt;wp-content/plugins&lt;/strong&gt; 以下に置いた後、管理画面のインストール済みプラグインから有効化してください。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/takuti/hurry-up-post&#34;&gt;takuti/hurry-up-post&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;とっても分かりやすかったスライド&lt;/h3&gt;
&lt;p&gt;&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/15359306&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen&gt; &lt;/iframe&gt;
&lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://www.slideshare.net/yuka2py/wordpress-15359306&#34; title=&#34;WordPressプラグイン作成入門&#34; target=&#34;_blank&#34;&gt;WordPressプラグイン作成入門&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/yuka2py&#34; target=&#34;_blank&#34;&gt;Yuji Nojima&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;br /&gt;
WordPressのプラグインってこんなに簡単な仕組みだったんですねー。みなさんも欲しい機能があるときは、簡単なものなら数十分で作れちゃうので自作してみてはいかがでしょうか。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Poisson Image Editingでいい感じの画像合成ができるやつを作る on Web</title>
      <link>http://localhost:1313/note/poisson-image-blending/</link>
      <pubDate>Sun, 08 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/note/poisson-image-blending/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://atnd.org/events/45075&#34;&gt;Aizu Advent Calendar 2013&lt;/a&gt; 8日目の記事です。&lt;/p&gt;
&lt;h3&gt;デモ&lt;/h3&gt;
&lt;p&gt;まずは作ったやつ（デモ版）からどうぞ。&lt;br /&gt;
【 &lt;strong&gt;&lt;a href=&#34;http://takuti.me/dev/poisson/demo/&#34;&gt;Poisson Image Blending - Demo&lt;/a&gt;&lt;/strong&gt; 】&lt;/p&gt;
&lt;p&gt;&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;Step1はいじらなくていいので、Step2で適当にマスク領域を塗ってあげてください。&lt;br /&gt;
&lt;img src=&#34;http://localhost:1313/images/wp/Screen-Shot-2013-12-08-at-12.41.01-AM.png&#34; alt=&#34;Screen Shot 2013-12-08 at 12.41.01 AM&#34; width=&#34;186&#34; height=&#34;271&#34; class=&#34;alignnone size-full wp-image-294&#34; /&gt;&lt;br /&gt;
こんな感じで塗れたら、&lt;strong&gt;HERE&lt;/strong&gt;ボタンをクリック。するとStep3にマスクをかけた領域だけ乗っかります。&lt;br /&gt;
&lt;img src=&#34;http://localhost:1313/images/wp/Screen-Shot-2013-12-08-at-12.43.06-AM.png&#34; alt=&#34;Screen Shot 2013-12-08 at 12.43.06 AM&#34; width=&#34;287&#34; height=&#34;275&#34; class=&#34;alignnone size-full wp-image-295&#34; /&gt;&lt;br /&gt;
そうしたら矢印ボタンで位置を調整して、&lt;br /&gt;
&lt;img src=&#34;http://localhost:1313/images/wp/Screen-Shot-2013-12-08-at-12.44.40-AM.png&#34; alt=&#34;Screen Shot 2013-12-08 at 12.44.40 AM&#34; width=&#34;282&#34; height=&#34;283&#34; class=&#34;alignnone size-full wp-image-296&#34; /&gt;&lt;br /&gt;
「ここで合成だー」と思ったところで&lt;strong&gt;OK&lt;/strong&gt;ボタンをクリックすれば、&lt;br /&gt;
&lt;img src=&#34;http://localhost:1313/images/wp/Screen-Shot-2013-12-08-at-12.44.51-AM.png&#34; alt=&#34;Screen Shot 2013-12-08 at 12.44.51 AM&#34; width=&#34;286&#34; height=&#34;283&#34; class=&#34;alignnone size-full wp-image-297&#34; /&gt;&lt;br /&gt;
真顔モナリザの完成です。&lt;/p&gt;
&lt;p&gt;このようにいい感じの画像合成ができる手法は、ググればC++やPython、さらにHTML5 Canvasでの実装もすでに存在します。ま、まぁマスク領域自分で塗れるようにしたから新規性あるよね・・・。&lt;/p&gt;
&lt;h3&gt;アプリ版&lt;/h3&gt;
&lt;p&gt;デモを利用して、合成したい2枚の画像を自分で選べるものを作りました。アプリ版です。&lt;br /&gt;
【 &lt;strong&gt;&lt;a href=&#34;http://takuti.me/dev/poisson/app/&#34;&gt;Poisson Image Blending - App&lt;/a&gt;&lt;/strong&gt; 】&lt;/p&gt;
&lt;p&gt;まずは&lt;strong&gt;ベース画像（合成先）&lt;/strong&gt;と&lt;strong&gt;ソース画像（切り抜いて合成する方）&lt;/strong&gt;をそれぞれ選択します。画像サイズはいずれも150ピクセル×150ピクセルに限定しています。それより大きい/小さい画像を選択すると縮小/拡大されます。&lt;/p&gt;
&lt;p&gt;ちゃんと両方選択できると、&lt;strong&gt;Start App&lt;/strong&gt;ボタンが有効になるのでクリック。&lt;br /&gt;
&lt;img src=&#34;http://localhost:1313/images/wp/Screen-Shot-2013-12-08-at-7.26.53-AM-e1386455286656.png&#34; alt=&#34;Screen Shot 2013-12-08 at 7.26.53 AM&#34; width=&#34;500&#34; height=&#34;237&#34; class=&#34;alignnone size-full wp-image-307&#34; /&gt;&lt;br /&gt;
すると先ほどのデモ版と同様の画面が表示されるので、Step2でマスク領域を塗って、Step3で位置調整、合成という流れで遊んでください。&lt;br /&gt;
&lt;img src=&#34;http://localhost:1313/images/wp/blend_result.png&#34; alt=&#34;blend_result&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignnone size-full wp-image-306&#34; /&gt;&lt;br /&gt;
こんな感じになります。&lt;del datetime=&#34;2013-12-07T16:12:47+00:00&#34;&gt;アゴ&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;実際に顔写真でやってみるのが個人的には一番おもしろいと思います。&lt;/p&gt;
&lt;p&gt;あ、フッターみたいな変な所に結構重要なボタンがあります。最悪ですね。&lt;br /&gt;
&lt;img src=&#34;http://localhost:1313/images/wp/Screen-Shot-2013-12-08-at-2.23.06-AM.png&#34; alt=&#34;Screen Shot 2013-12-08 at 2.23.06 AM&#34; width=&#34;500&#34; height=&#34;351&#34; class=&#34;alignnone size-full wp-image-300&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;Importing gradients と Mixing gradients&lt;/h3&gt;
&lt;p&gt;ここで無視していたStep1の話をしましょう。&lt;/p&gt;
&lt;p&gt;いい感じの画像合成では画像の勾配(Gradients)が大切です。画像における勾配とは、隣り合っているピクセル同士でRGB値がどれだけ違うかということ。&lt;br /&gt;
&lt;img src=&#34;http://localhost:1313/images/wp/blend_result.png&#34; alt=&#34;blend_result&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignnone size-full wp-image-306&#34; /&gt;&lt;br /&gt;
先ほどの合成結果を見ると、&lt;strong&gt;色はベース画像に馴染みつつも、どこに線があるかという情報はソース画像のものを受け継いでいます&lt;/strong&gt;。このバランスがいい感じの合成を実現しているんですね。&lt;/p&gt;
&lt;p&gt;この線の情報（＝合成結果の勾配）の求め方は2通りあります。それが&lt;strong&gt;Importing gradients&lt;/strong&gt;と&lt;strong&gt;Mixing gradients&lt;/strong&gt;です。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Importing gradients&lt;/strong&gt;は先ほども例に挙げたように、ソース画像の勾配をそのまま合成結果に利用します。一方で&lt;strong&gt;Mixing gradients&lt;/strong&gt;は、各ピクセルに対してベース画像とソース画像の勾配を比較して大きい方を採用するというものです。&lt;/p&gt;
&lt;p&gt;これを切り替えて試せるのが、デモ版にもアプリ版にもあるStep1のラジオボタンです。さらにデモ版では&lt;strong&gt;Faces&lt;/strong&gt;と&lt;strong&gt;Hand&amp;amp;Sign&lt;/strong&gt;という2種類のベース画像・ソース画像の組み合わせを切り替え可能にしました。勾配の取り方2種類と画像セット2種類なので計4通りの合成を試すことができ、結果は以下のようになります。&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;th&gt;Importing&lt;/th&gt;
&lt;th&gt;Mixing&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Faces&lt;/th&gt;
&lt;td&gt;&lt;img src=&#34;http://localhost:1313/images/wp/faces_importing.png&#34; alt=&#34;faces_importing&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignnone size-full wp-image-301&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;http://localhost:1313/images/wp/faces_mixing.png&#34; alt=&#34;faces_mixing&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignnone size-full wp-image-302&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Hand&amp;amp;Sign&lt;/th&gt;
&lt;td&gt;&lt;img src=&#34;http://localhost:1313/images/wp/hand_importing.png&#34; alt=&#34;hand_importing&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignnone size-full wp-image-303&#34; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;http://localhost:1313/images/wp/hand_mixing.png&#34; alt=&#34;hand_mixing&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignnone size-full wp-image-304&#34; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;見ての通り、Facesの場合はImportingのほうが期待通りの結果になっています。一方Hand&amp;amp;Signでは、Mixingのほうが手のシワを残しつつ文字を合成していて綺麗な結果になっています。&lt;strong&gt;文字上では手のシワよりも文字の勾配のほうが大きく、その他の部分は変化の少ない白い紙の写真なので手のシワの勾配のほうが大きかった&lt;/strong&gt;というわけです。&lt;/p&gt;
&lt;p&gt;ImportingとMixingのどちらが良いのかは一概に言うことはできず、合成する画像の組み合わせによって勾配の取り方も適切な方を使う必要があるんですね。&lt;/p&gt;
&lt;h3&gt;Poisson Image Editing&lt;/h3&gt;
&lt;p&gt;さて、そろそろ今回の画像合成手法をちゃんと紹介しましょう。&lt;br /&gt;
（トップダウン式な記事で我ながらすばらですね）&lt;/p&gt;
&lt;p&gt;今回利用している手法は&lt;strong&gt;Poisson Image Editing&lt;/strong&gt;というタイトルの、「ポアソン方程式を解くことで画像補間をいい感じにできるよ」という内容の論文で提案されているものです。PDFは以下より。&lt;/p&gt;
&lt;pre&gt;P. Pérez, M. Gangnet, A. Blake. &lt;strong&gt;&lt;a href=&#34;http://xeds.eu/clone/poisson.pdf&#34;&gt;Poisson Image Editing&lt;/a&gt;&lt;/strong&gt;. ACM Transactions on Graphics (SIGGRAPH&#39;03), 22(3):313-318, 2003.&lt;/pre&gt;
&lt;p&gt;いい感じの画像補完の具体例が今回実装したシームレスな画像合成で、これは論文の2章と3章にあたります。式の導出から書こうと思いましたがイマイチ自身無いのと実装で力尽きたのとでやめました。気になった方は原文読んで下さい。&lt;/p&gt;
&lt;p&gt;結論だけ書くと、論文内の式(7)を\(f_p=\)の形に変形して解けば終わりです。すなわち、すべての\(p \in \Omega\)に対して以下の式が成り立つような連立一次方程式を解くと言う問題。&lt;/p&gt;
&lt;p&gt;\[&lt;br /&gt;
f_p = \frac{\displaystyle \sum_{q \in N_p \cap \Omega}f_q + \sum_{q \in N_p \cap \partial \Omega}f^*_q + \sum_{q \in N_p}v_{pq}}{\displaystyle |N_p|}&lt;br /&gt;
\]&lt;/p&gt;
&lt;p&gt;この式の意味するところは論文中の図1なんかを参照しながらイメージするしかありません。無理やり言葉で説明するとだいたい以下のような雰囲気です。&lt;/p&gt;
&lt;p&gt;※&lt;strong&gt;ベース画像＝合成先&lt;/strong&gt;、&lt;strong&gt;ソース画像＝切り抜いて合成する方&lt;/strong&gt;です。&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;\(\Omega\)&lt;/dt&gt;
&lt;dd&gt;合成結果の中で、切り抜いたソース画像が合成された領域&lt;/dd&gt;
&lt;dt&gt;\(f_p\)&lt;/dt&gt;
&lt;dd&gt;ある点\(p \in \Omega\)での\(f\)の値で、&lt;strong&gt;これを求めることが今回の目標&lt;/strong&gt;&lt;br /&gt;\(f\)は\(\Omega\)内の各ピクセルのRGB値を示す関数&lt;/dd&gt;
&lt;dt&gt;\(f^*_p\)&lt;/dt&gt;
&lt;dd&gt;ある点\(p\)での\(f^*\)の値&lt;br /&gt;\(f^*\)はベース画像内の各ピクセルのRGB値を示す関数（既知）&lt;/dd&gt;
&lt;dt&gt;\(N_p\)&lt;/dt&gt;
&lt;dd&gt;ある点\(p\)の近傍点の集合（今回はその点の上下左右、4近傍）&lt;/dd&gt;
&lt;dt&gt;\(\partial \Omega\)&lt;/dt&gt;
&lt;dd&gt;\(\Omega\)の境界領域&lt;br /&gt;\(p \not\in \Omega\)を満たす点のうち、近傍点が1つでも領域\(\Omega\)に入っていれば\(p \in \partial \Omega\)&lt;br /&gt;&lt;strong&gt;自分自身は入っていないけど近傍点のどれかは入っている&lt;/strong&gt;という状態&lt;/dd&gt;
&lt;dt&gt;\(g_p\)&lt;/dt&gt;
&lt;dd&gt;ソース画像からマスクをかけて切り抜いた部分の中にある点\(p\)でのRGB値&lt;/dd&gt;
&lt;dt&gt;\(v_{pq}\)&lt;/dt&gt;
&lt;dd&gt;ある点\(p\)とその近傍点のうちの1つ\(q\)の間の勾配&lt;br /&gt;&lt;strong&gt;Importing&lt;/strong&gt; \(g_p-g_q\)&lt;br /&gt;&lt;strong&gt;Mixing&lt;/strong&gt; ベース画像の勾配の方が大きければ\(f^*_p-f^*_q\), そうじゃなければ\(g_p-g_q\)&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;これに沿って実際に合成を行っている（＝\(f_p\)を求めている）コードは、ざっくりと流れを追うと以下のような感じ。&lt;/p&gt;
&lt;pre class=&#34;prettyprint lang-js&#34;&gt;
do {
  // 全ピクセルを見る 今回は簡単のため画像の端のピクセルは考慮しない
  for(var y=1; y&amp;lt;base_size.height-1; y++) {
    for(var x=1; x&amp;lt;base_size.width-1; x++) {
      if(/* もしStep2で塗ったマスク領域の中なら合成後のRGB値を推定 */) {

        // そのピクセルのRGB各色について連立一次方程式を解く
        for(var rgb=0; rgb&amp;lt;3; rgb++) {
          var sum_fq = 0;       // (1)
          var sum_boundary = 0; // (2)
          var sum_vpq = 0;      // (3)

          // 近傍点（4点）それぞれについて
          for(var i=0; i&amp;lt;num_neighbors; i++) {

            if(/* もし近傍点がStep2で塗ったマスク領域の中なら */) {
              // (1)の加算
            } else { // 近傍点は境界領域の中
              // (2)の加算
            }

            if(/* Mixingで、ベース画像の勾配の方が大きければ */) {
              // (3)の加算（ベース画像の勾配）
            } else {
              // (3)の加算（ソース画像の勾配）
            }
          }
          // そのピクセルのRGB推定値の格納
        }
      }
    }
  }
  if(/* 全ピクセルの推定が終わったので収束判定 */) break;
} while(true);
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/takuti/poisson-image-blending&#34;&gt;takuti / poisson-image-blending&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(1)〜(3)は先に示した\(f_p = \)の式の右辺、分子の3つ項に対応します。&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;(1)&lt;/dt&gt;
&lt;dd&gt;\(\displaystyle \sum_{q \in N_p \cap \Omega}f_q\)&lt;/dd&gt;
&lt;dt&gt;(2)&lt;/dt&gt;
&lt;dd&gt;\(\displaystyle \sum_{q \in N_p \cap \partial \Omega}f^*_q\)&lt;/dd&gt;
&lt;dt&gt;(3)&lt;/dt&gt;
&lt;dd&gt;\(\displaystyle \sum_{q \in N_p}v_{pq}\)&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;今、すべての\(p \in \Omega\)に対して\(f_p\)を求めているため、連立一次方程式の未知数（＝合成される領域内の点の数）は\(|\Omega|\)です。\(|\Omega|\)個の未知の点を順番に推定していくことになりますが、推定途中でも(1)では\(f\)の値を利用しています。&lt;/p&gt;
&lt;p&gt;このような、&lt;strong&gt;連立一次方程式の解の推定途中で推定済みの値とまだ推定されていない（過去の）値の両方を計算に利用する形&lt;/strong&gt;は、ガウスサイデル法の漸化式そのままです。そこで上記簡易コードではガウスサイデル法による解の推定を行っており、推定値の収束を合成の終了としています。&lt;/p&gt;
&lt;p&gt;合成の軸になる処理はこのようなシンプルな数値計算で完結します。しかし実際はCanvasの操作なんかでコードの肥大化が深刻。&lt;/p&gt;
&lt;h3&gt;まとめ&lt;/h3&gt;
&lt;p&gt;というわけで、Poisson Image Editingという論文で提案されたシームレスな画像合成をCanvasとJavaScriptで実装してみて、おまけにアプリ版も作ってみたお話でした。&lt;/p&gt;
&lt;p&gt;実は以前この手法の画像合成を試したことがあったのですが、なぜかうまくいかず詰んだので放置していました。しかし再挑戦したらなんとかなった。これは今期履修している数値解析のおかげかな！？（申し訳程度の会津大要素）&lt;/p&gt;
&lt;p&gt;アプリ版はまた気が向いた頃に実装の見直しや改善をするかもしれません。&lt;/p&gt;
&lt;p&gt;とりあえず今はこの記事を書き上げたことでようやくBDFS始められるので僕は消えます。&lt;/p&gt;
&lt;div class=&#34;kaerebalink-box&#34; style=&#34;text-align:left;padding-bottom:20px;font-size:small;/zoom: 1;overflow: hidden;&#34;&gt;
&lt;div class=&#34;kaerebalink-image&#34; style=&#34;float:left;margin:0 15px 10px 0;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00EVN4T40/takuti-22/ref=nosim/&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/61wNv9RM0UL._SL160_.jpg&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&#34;kaerebalink-info&#34; style=&#34;line-height:120%;/zoom: 1;overflow: hidden;&#34;&gt;
&lt;div class=&#34;kaerebalink-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00EVN4T40/takuti-22/ref=nosim/&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;ブレイブリーデフォルト フォーザ・シークウェル&lt;/a&gt;
&lt;div class=&#34;kaerebalink-powered-date&#34; style=&#34;font-size:8pt;margin-top:5px;font-family:verdana;line-height:120%&#34;&gt;posted with &lt;a href=&#34;http://kaereba.com&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;カエレバ&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;kaerebalink-detail&#34; style=&#34;margin-bottom:5px;&#34;&gt; スクウェア・エニックス 2013-12-05    &lt;/div&gt;
&lt;div class=&#34;kaerebalink-link1&#34; style=&#34;margin-top:10px;&#34;&gt;
&lt;div class=&#34;shoplinkamazon&#34; style=&#34;display:inline;margin-right:5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/search?keywords=%83u%83%8C%83C%83u%83%8A%81%5B%83f%83t%83H%83%8B%83g%20%83t%83H%81%5B%83U&amp;__mk_ja_JP=%83J%83%5E%83J%83i&amp;tag=takuti-22&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34; title=&#34;アマゾン&#34; &gt;Amazon&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;booklink-footer&#34; style=&#34;clear: left&#34;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;明日、&lt;a href=&#34;http://atnd.org/events/45075&#34;&gt;Aizu Advent Calendar 2013&lt;/a&gt; 9日目の担当は&lt;a href=&#34;http://twitter.com/WinField95&#34;&gt;95さん&lt;/a&gt;です！しゃす！&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://araraak.hatenadiary.jp/&#34;&gt;影で就活Advent Calendarやってる人&lt;/a&gt;がいるのでよかったらそちらも見てあげて下さい。&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://opencv.jp/opencv2-x-samples/poisson-blending&#34;&gt;Poisson Blending | OpenCV.jp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/mscp/20081130/1261916214&#34;&gt;Poisson Image Editing - ますぽんの雑記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://akita-nct.jp/yamamoto/lecture/2006/5E/Linear_eauations/concrete_relax_html/node2.html&#34;&gt;2 ガウス・ザイデル法を使った計算&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.html5rocks.com/ja/tutorials/file/dndfiles/&#34;&gt;JavaScript でのローカル ファイルの読み込み - HTML5 Rocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jsdo.it/Yukisuke/p311&#34;&gt;Canvasの画像(スクリーンショット)をローカルダウンロードします。 - jsdo.it - Share JavaScript, HTML5 and CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>AngularJSでChromeExtension開発をするならCSPに気をつけよう</title>
      <link>http://localhost:1313/note/crx-dev-using-angularjs/</link>
      <pubDate>Fri, 15 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/note/crx-dev-using-angularjs/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.takuti.me/hello-chrome-extension/&#34;&gt;初めてのChromeExtensionを作った&lt;/a&gt;後に&lt;a href=&#34;http://blog.takuti.me/hello-angularjs/&#34;&gt;AngularJSに触れて&lt;/a&gt;、最初は&lt;strong&gt;「ChromeExtensionをAngularJS使って作ることができたらChromeの右上ライフが捗る！？」&lt;/strong&gt;なんて思って試したわけですが、何故かAngularJSが動かず諦めていました。&lt;/p&gt;
&lt;p&gt;それを最近ふと思い出したので調べてみたら、ChromeExtensionの&lt;strong&gt;CSP&lt;/strong&gt;  (&lt;strong&gt;C&lt;/strong&gt;ontent &lt;strong&gt;S&lt;/strong&gt;ecurity &lt;strong&gt;P&lt;/strong&gt;olicy) が原因だったことがあっさりと分かって解決したのでメモ。&lt;/p&gt;
&lt;h3&gt;結論&lt;/h3&gt;
&lt;p&gt;AngularJSでChromeExtension開発をするためにやるべきことは以下の2つ。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ng-appの横にng-cspと書いてあげる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.angularjs.org/snapshot/angular-csp.css&#34;&gt;angular-csp.css&lt;/a&gt;をローカルに持ってきてロードしてあげる&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下詳細。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;h3&gt;CSP (Content Security Policy) とは&lt;/h3&gt;
&lt;p&gt;すごーくざっくりと言えば、XSSをはじめとする&lt;strong&gt;攻撃に利用されそうな機能に対して与える制限&lt;/strong&gt;のこと。&lt;/p&gt;
&lt;p&gt;そのような機能の分かりやすい例としては&lt;strong&gt;eval()&lt;/strong&gt;でしょう。ご存知の通りevalは与えられた文字列をソースとしてなんでもかんでも解釈・実行してしまうため、脆弱性があった際に与える影響は絶大です。&lt;/p&gt;
&lt;div class=&#34;booklink-box&#34; style=&#34;text-align:left;padding-bottom:20px;font-size:small;/zoom: 1;overflow: hidden;&#34;&gt;
&lt;div class=&#34;booklink-image&#34; style=&#34;float:left;margin:0 15px 10px 0;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/asin/4797361190/takuti-22/&#34; name=&#34;booklink&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41lX6Fg5KpL._SL160_.jpg&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&#34;booklink-info&#34; style=&#34;line-height:120%;/zoom: 1;overflow: hidden;&#34;&gt;
&lt;div class=&#34;booklink-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/asin/4797361190/takuti-22/&#34; rel=&#34;nofollow&#34; name=&#34;booklink&#34; target=&#34;_blank&#34;&gt;体系的に学ぶ 安全なWebアプリケーションの作り方　脆弱性が生まれる原理と対策の実践&lt;/a&gt;
&lt;div class=&#34;booklink-powered-date&#34; style=&#34;font-size:8pt;margin-top:5px;font-family:verdana;line-height:120%&#34;&gt;posted with &lt;a href=&#34;http://yomereba.com&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;ヨメレバ&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;booklink-detail&#34; style=&#34;margin-bottom:5px;&#34;&gt;徳丸 浩 ソフトバンククリエイティブ 2011-03-03    &lt;/div&gt;
&lt;div class=&#34;booklink-link2&#34; style=&#34;margin-top:10px;&#34;&gt;
&lt;div class=&#34;shoplinkamazon&#34; style=&#34;display:inline;margin-right:5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/asin/4797361190/takuti-22/&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34; title=&#34;アマゾン&#34; &gt;Amazon&lt;/a&gt;&lt;/div&gt;
&lt;div class=&#34;shoplinkkindle&#34; style=&#34;display:inline;margin-right:5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00E5TJ120/takuti-22/&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34; &gt;Kindle&lt;/a&gt;&lt;/div&gt;
&lt;div class=&#34;shoplinkrakuten&#34; style=&#34;display:inline;margin-right:5px&#34;&gt;&lt;a href=&#34;http://hb.afl.rakuten.co.jp/hgc/10952997.eae88ca3.10952998.38cdd415/?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F6994894%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34; title=&#34;楽天ブックス&#34; &gt;楽天ブックス&lt;/a&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;booklink-footer&#34; style=&#34;clear: left&#34;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;evalを使おう！とあなたが思った時、それは他の機能で代替可能ですので思い止まりましょう。というわけで、CSPでeval相当の記述を全て禁止にすることができたりするわけです。&lt;/p&gt;
&lt;h3&gt;ChromeExtensionのCSPとAngularJSの使い方&lt;/h3&gt;
&lt;p&gt;ChromeExtensionでは、CSPがデフォルトで設定されています。&lt;br /&gt;
&lt;a href=&#34;http://developer.chrome.com/extensions/contentSecurityPolicy.html&#34;&gt;Content Security Policy (CSP) - Google Chrome&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;設定されている制限の内容は、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;evalとそれに相当する記述の無効化&lt;/li&gt;
&lt;li&gt;インライン（HTMLに埋め込む形）でのJavaScript実行の禁止&lt;/li&gt;
&lt;li&gt;スクリプトファイルやその他リソースファイルの読み込みはローカルからのみ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の3つ。&lt;/p&gt;
&lt;p&gt;AngularJSでは実行速度向上のためにeval相当の記述を利用している箇所があり、そこがChromeExtensionのCSPに引っかかっているのです。10041行目(angular.js v1.2.0)から定義されているgetterFn関数です。これがChromeExtensionでAngularJSが動かなかった原因。&lt;/p&gt;
&lt;p&gt;そして、この問題への対処法は&lt;a href=&#34;http://docs.angularjs.org/api/ng.directive:ngCsp&#34;&gt;AngularJS公式で用意されています&lt;/a&gt;。やり方は&lt;strong&gt;ng-appと一緒にng-cspと書いてあげるだけ&lt;/strong&gt;。&lt;/p&gt;
&lt;pre class=&#34;prettyprint lang-html&#34;&gt;
&amp;lt;html lang=&amp;quot;ja&amp;quot; ng-app ng-csp&amp;gt;
&lt;/pre&gt;
&lt;p&gt;これで、AngularJSが実行速度向上を諦めるモードになります。そんなわけですべての式の評価にかかる速度が30%減になってしまうようですが、仕方ない。&lt;/p&gt;
&lt;p&gt;しかしどうやら30%の速度だけでは等価交換にならなかったようで、CSPによって影響を受けたままのものがまだあります。それはCSSの一部。&lt;/p&gt;
&lt;p&gt;angular.js(v1.2.0)の最下部では、AngularJSの導入に伴って必要となるCSSをまとめてjQueryでhead要素の先頭に埋め込んでいます。これは例えばバリデーション時に表示するエラーメッセージのhidden制御なんかが関係してくる。&lt;/p&gt;
&lt;p&gt;その処理がChromeExtensionのCSPの1つ「インラインでのJavaScript実行の禁止」に引っかかってしまい、必要なCSSが埋め込まれない問題が発生します。実際、ng-cspを付けるだけだとバリデーションの結果に関係なくエラーメッセージが表示され続けます。&lt;/p&gt;
&lt;p&gt;これを解決するには、jQueryを使って埋め込んでいたCSSを全て1つのCSSファイルにまとめて&lt;strong&gt;ローカルから&lt;/strong&gt;ロードしてあげる必要があるのです。&lt;/p&gt;
&lt;p&gt;ロードすべきCSSファイルは公式でも公開しています。&lt;br /&gt;
&lt;a href=&#34;http://code.angularjs.org/snapshot/angular-csp.css&#34;&gt;angular-csp.css&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ここまでやって初めて、ChromeExtension上でAngularJSが問題なく動くようになります。（ぱちぱち&lt;/p&gt;
&lt;h3&gt;へんかんくん v0.2.0 が生まれました&lt;/h3&gt;
&lt;p&gt;以上、AngularJSでChromeExtension開発をした時のメモでした。&lt;/p&gt;
&lt;p&gt;僕が何をしたかったかと言うと、&lt;a href=&#34;http://blog.takuti.me/hello-chrome-extension/&#34;&gt;初めて作ったChromeExtension&lt;/a&gt;のリニューアルです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/wp/num.png&#34; alt=&#34;num&#34; width=&#34;309&#34; height=&#34;239&#34; class=&#34;alignnone size-full wp-image-282&#34; /&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/takuti/conversion_crx&#34;&gt;takuti/conversion_crx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTMLエスケープ機能が追加されて、名前は「しんすうへんかんくん」から「へんかんくん」になりました。僕のChromeの右上ライフが捗ります。それだけ。&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;p&gt;&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/25492209&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen&gt; &lt;/iframe&gt;&lt;/p&gt;
&lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://www.slideshare.net/benlau/making-chrome-extension-with-angularjs&#34; title=&#34;Making Chrome Extension with AngularJS&#34; target=&#34;_blank&#34;&gt;Making Chrome Extension with AngularJS&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/benlau&#34; target=&#34;_blank&#34;&gt;Ben Lau&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>HTML5 CanvasでメルトPVに出てくるメル時計をつくった</title>
      <link>http://localhost:1313/note/meltokei/</link>
      <pubDate>Sun, 04 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/note/meltokei/</guid>
      <description>&lt;p&gt;メルトといえばあのメルトです。恋に落ちる音がするやつです。冬に売ってる雪のような口どけのやつじゃないです。&lt;/p&gt;
&lt;p&gt;そのPVに、以下のようなものがあります。&lt;/p&gt;
&lt;p&gt;&lt;script type=&#34;text/javascript&#34; src=&#34;http://ext.nicovideo.jp/thumb_watch/sm2671946&#34;&gt;&lt;/script&gt;&lt;br /&gt;
&lt;noscript&gt;&lt;a href=&#34;http://www.nicovideo.jp/watch/sm2671946&#34;&gt;【ニコニコ動画】メルトPV　shortバージョン（完成版）&lt;/a&gt;&lt;/noscript&gt;&lt;/p&gt;
&lt;p&gt;素敵ですね。&lt;/p&gt;
&lt;p&gt;このPVに出てくる時計が可愛いということで、アップロードされた当時は&lt;strong&gt;メル時計&lt;/strong&gt;なんて呼ばれて、&lt;a href=&#34;http://www.nicovideo.jp/watch/sm2146274&#34;&gt;実際に作ってみた人&lt;/a&gt;や&lt;a href=&#34;http://www.nicovideo.jp/watch/sm2694098&#34;&gt;Windows Vistaのサイドバーガジェットにした人&lt;/a&gt;、&lt;a href=&#34;http://www.nicovideo.jp/watch/sm2694098&#34;&gt;Flashで作った人&lt;/a&gt;なんかが現れたのは記憶に新し・・・くはないけれど、今でもよく覚えています。&lt;/p&gt;
&lt;p&gt;ふとHTML5 Canvasで何か作りたいなーと思って思い浮かんだのがこのメル時計だったので早速作ってみました。完成品は以下より。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://takuti.me/dev/meltokei/&#34;&gt;メル時計&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&#34;http://localhost:1313/images/wp/meltokei.png&#34; alt=&#34;meltokei&#34; width=&#34;428&#34; height=&#34;420&#34; class=&#34;alignnone size-full wp-image-236&#34; /&gt;&lt;br /&gt;
&lt;!--more--&gt;&lt;br /&gt;
秒針もつけました。いいかんじ。&lt;/p&gt;
&lt;p&gt;PVの時計のシーンを見ながら作って、サイズはそのままに、色もMacに標準で入っているカラーピッカー &lt;strong&gt;DigitalColor Meter&lt;/strong&gt; を使ってできる限り再現したつもりです。もちろん画像は使ってません。&lt;/p&gt;
&lt;p&gt;PVでは左上から光が当たっているので影を付けたかったのですが、あまり綺麗にならなかったのでそれはボツ。&lt;/p&gt;
&lt;p&gt;実装に関しては、&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;背景色でCanvas全体を塗りつぶし&lt;/li&gt;
&lt;li&gt;時計の円を色ごとに外側から順番に描画&lt;/li&gt;
&lt;li&gt;文字盤代わりの六角形たちを描画&lt;/li&gt;
&lt;li&gt;現在の時刻からそれぞれの針の角度を求めて描画&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;を1秒間隔でやり続けるだけです。&lt;/p&gt;
&lt;p&gt;基本的にはただひたすらarcとかfillとかやればいいだけなので簡単ですが、Canvasビギナーの僕には回転 &lt;strong&gt;rotate()&lt;/strong&gt; の扱い方と、長針・短針の角丸化が少しだけ厄介でした。勉強になった。&lt;/p&gt;
&lt;p&gt;これについては別記事でメモとして書きます。&lt;br /&gt;
&lt;a href=&#34;http://blog.takuti.me/canvas-rotate-round/&#34;&gt;HTML5 Canvasの回転と角丸についてメモ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PV確認のついでにメルトを聴いてちょっと懐かしい気持ちになり、投稿日を確認したらもう5年も前で驚きを隠せなかった僕でした。おわり。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HTML5 Canvasの回転と角丸についてメモ</title>
      <link>http://localhost:1313/note/canvas-rotate-round/</link>
      <pubDate>Sat, 03 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/note/canvas-rotate-round/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.takuti.me/meltokei/&#34;&gt;HTML5 CanvasでメルトPVに出てくるメル時計をつくった&lt;/a&gt;で、ビギナーの僕には少し厄介だった回転と角丸化についてメモメモ。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;h3&gt;回転 rotate() の扱い方&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://takuti.me/dev/meltokei/&#34;&gt;メル時計&lt;/a&gt;の文字盤代わりの六角形は、12時の位置に全ての時刻分を（色を変えながら）作りつつ、それらを30°ずつ回転させていくことで描画しました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/wp/hexagon.png&#34; alt=&#34;hexagon&#34; width=&#34;202&#34; height=&#34;144&#34; class=&#34;alignnone size-full wp-image-237&#34; /&gt;&lt;br /&gt;
1：てっぺんをスタートして右に8px、下に10pxの移動&lt;br /&gt;
2：下に18pxの移動&lt;br /&gt;
3：2の移動した先から、更に下に3px移動したところが、もう1つの六角形のてっぺん&lt;/p&gt;
&lt;p&gt;この3つさえ分かればあとは対称だったりするので、とりあえず12時の位置に色を変えながら量産することは問題なくできます。あとは30°ずつ回転をさせるだけです。&lt;/p&gt;
&lt;p&gt;しかし、&lt;strong&gt;rotate()&lt;/strong&gt;はcanvasそのものの左上を中心とみて回転させるので、ふつうに&lt;strong&gt;rotate(Math.PI/6)&lt;/strong&gt;とかやっても思うように回ってくれません。円（時計）の中心を回転の中心にしてほしい！&lt;/p&gt;
&lt;p&gt;そんなときは、「現時点でのcanvasそのものの左上を円の中心にズラしてから回転させる。回転が終わったらズラした分を元に戻す。」という方法をとるみたいです。&lt;/p&gt;
&lt;p&gt;【参考】&lt;a href=&#34;http://tech.kayac.com/archive/canvas-tutorial.html&#34;&gt;今更聞けないcanvasの基礎の基礎 | tech.kayac.com - KAYAC engineers&#39; blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;つまり、canvas全体を回転の中心にしたい座標（今回は400x400のcanvasに描画した半径200の円の中心なので(200,200)）の分だけ移動して、本来回転させたかった角度で回転させたら、移動させた分を元に戻す、と。&lt;/p&gt;
&lt;pre class=&#34;prettyprint lang-js&#34;&gt;
ctx.translate(200,200);
ctx.rotate(30*Math.PI/180);
ctx.translate(-200,-200);
&lt;/pre&gt;
&lt;p&gt;デキター！&lt;/p&gt;
&lt;p&gt;ちなみに、&lt;strong&gt;rotate()&lt;/strong&gt;の状態を解除する方法も分からなくて悲しみました。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;rotate(θ)&lt;/strong&gt;をした後に何もしないと、以後の描画処理が全て角度θだけ回転した状態で行われてしまうんですね。だから、もう回転の必要がなくなったらそれを解除して、全く回転していない状態に戻してあげる必要があるというわけなんだとか。&lt;/p&gt;
&lt;p&gt;そこでよく使われるのが&lt;strong&gt;save()&lt;/strong&gt;と&lt;strong&gt;restore()&lt;/strong&gt;で、これらを使うと描画状態（回転情報も含んでいる&lt;strong&gt;変換行列&lt;/strong&gt;など）を保存して、復元することができる。&lt;/p&gt;
&lt;p&gt;全く回転していない状態を&lt;strong&gt;save()&lt;/strong&gt;して、回転の必要がなくなったところですぐ&lt;strong&gt;restore()&lt;/strong&gt;してあげれば、その後もイメージどおりに描画できるんですね！&lt;/p&gt;
&lt;pre class=&#34;prettyprint lang-js&#34;&gt;
ctx.save(); // 変換行列の初期状態（全く回転していない状態）を保存

rotateSomething(); // 回転を含む処理

// 回転を含む処理の後には必ず変換行列を初期状態に戻し、再度保存しておく
ctx.restore();
ctx.save();
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;save()&lt;/strong&gt;と&lt;strong&gt;restore()&lt;/strong&gt;はスタックのPushとPopに対応するので、一度&lt;strong&gt;restore()&lt;/strong&gt;をしてしまうとせっかく保存していた初期状態の情報が消えてしまいます。そのため、&lt;strong&gt;restore()&lt;/strong&gt;の直後にもう一度&lt;strong&gt;save()&lt;/strong&gt;をして、次の回転を含む処理に備えます。&lt;/p&gt;
&lt;p&gt;というわけで、移動させてから回転させてまた戻すことと、回転した状態を解除することによって、イメージ通りの回転を含む描画処理いろいろができました。&lt;/p&gt;
&lt;h3&gt;角丸な長方形&lt;/h3&gt;
&lt;p&gt;長方形を角丸にしたい場面はたくさんあるのに、Canvasではササッと角丸な長方形を作ってくれる機能などありません。&lt;/p&gt;
&lt;p&gt;そこで、角丸長方形は1/4の円弧を4つ描いてそれらを結ぶことによって実現します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/wp/Screen-Shot-2013-08-04-at-12.19.25-PM.png&#34; alt=&#34;Screen Shot 2013-08-04 at 12.19.25 PM&#34; width=&#34;130&#34; height=&#34;130&#34; class=&#34;alignnone size-full wp-image-239&#34; /&gt;&lt;br /&gt;
これは円弧ひとつひとつに対して&lt;strong&gt;beginPath()&lt;/strong&gt;,&lt;strong&gt;stroke()&lt;/strong&gt;をしたもの。&lt;/p&gt;
&lt;p&gt;これを、&lt;strong&gt;beginPath()&lt;/strong&gt;を最初に一度だけ行い、円弧すべての&lt;strong&gt;arc()&lt;/strong&gt;を実行した後に&lt;strong&gt;closePath()&lt;/strong&gt;をしてあげるようにすれば、あとは&lt;strong&gt;stroke()&lt;/strong&gt;なり&lt;strong&gt;fill()&lt;/strong&gt;なりでお好みの角丸な長方形ができあがる。&lt;/p&gt;
&lt;p&gt;長方形の位置や幅、高さは4つの円弧の中心点に依存するわけですね。&lt;/p&gt;
&lt;p&gt;これについては、以下を参考にさせていただき解釈しました。&lt;br /&gt;
&lt;a href=&#34;http://devlabo.blogspot.jp/2010/03/javascriptcanvas.html&#34;&gt;[javascript]canvasで円や角丸の矩形を描画する&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以上、回転と角丸についてのメモでした。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AngularJSでさくさく進数相互変換をつくる</title>
      <link>http://localhost:1313/note/hello-angularjs/</link>
      <pubDate>Fri, 02 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/note/hello-angularjs/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt;を使ってみました。MVCな雰囲気を取り入れたJavaScriptのフレームワークです。あんぎゅらーらしいです、あんぐらーじゃないです。&lt;/p&gt;
&lt;p&gt;この子、とんでもなく簡単で気持ちがいいですね。&lt;strong&gt;ng-app, ng-model, &amp;#123;&amp;#123;&amp;#125;&amp;#125;&lt;/strong&gt;を追加するだけであっという間にさくさく！&lt;/p&gt;
&lt;p&gt;公式にある一番基本のアプリが以下。&lt;/p&gt;
&lt;pre class=&#34;prettyprint&#34;&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html ng-app&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;script src=&amp;quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;label&amp;gt;Name:&amp;lt;/label&amp;gt;
      &amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;yourName&amp;quot; placeholder=&amp;quot;Enter a name here&amp;quot;&amp;gt;
      &amp;lt;hr&amp;gt;
      &amp;lt;h1&amp;gt;Hello {{yourName}}!&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
&lt;p&gt;せっかくなので&lt;a href=&#34;http://blog.takuti.me/hello-chrome-extension/&#34;&gt;先日作った進数変換のできるChrome拡張&lt;/a&gt;を流用して、入力したらすぐ進数変換されるものを作りました。よかったら使ってあげて下さい。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://takuti.me/dev/binary2decimal2hex/&#34;&gt;さくさく進数相互変換&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&#34;http://localhost:1313/images/wp/Screen-Shot-2013-08-01-at-11.38.37-PM-e1375367959918.png&#34; alt=&#34;Screen Shot 2013-08-01 at 11.38.37 PM&#34; width=&#34;500&#34; height=&#34;398&#34; class=&#34;alignnone size-full wp-image-232&#34; /&gt;&lt;br /&gt;
&lt;!--more--&gt;&lt;br /&gt;
AngularJSそのものに関する説明は他に譲りますが、バリデーションが特に簡単で嬉しかった印象です。&lt;/p&gt;
&lt;pre class=&#34;prettyprint&#34;&gt;
&amp;lt;p&amp;gt;【2進数】　&amp;lt;span class=&amp;quot;error&amp;quot; ng-show=&amp;quot;num_form.binary.$error.pattern&amp;quot;&amp;gt;2進数は0と1だけだよ&amp;lt;/span&amp;gt;&amp;lt;br /&amp;gt;
  &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;binary&amp;quot; placeholder=&amp;quot;ここに2進数を入力&amp;quot; ng-model=&amp;quot;num.binary&amp;quot; ng-pattern=&amp;quot;binary_pattern&amp;quot; ng-change=&amp;quot;binary()&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&lt;/pre&gt;
&lt;p&gt;見づらいですが、各進数あたり2行でバリデーションも含めて必要なことのほとんどが書けてしまいます。&lt;/p&gt;
&lt;p&gt;進数の変換処理も、&lt;strong&gt;ng-change&lt;/strong&gt;からコントローラーの関数を適当に呼んであげればリアルタイムにできちゃったり。&lt;/p&gt;
&lt;pre class=&#34;prettyprint&#34;&gt;
$scope.binary = function(){
    if($scope.num.binary){
        $scope.num.decimal = parseInt($scope.num.binary,2);
        $scope.num.hex = parseInt($scope.num.binary,2).toString(16);
    } else {
        $scope.num.decimal = undefined;
        $scope.num.hex = undefined;
    }
}
&lt;/pre&gt;
&lt;p&gt;というわけで、AngularJSでした。開発はさくさく進んで、できるものはさくさく動いて、2さくさくですね。&lt;/p&gt;
&lt;p&gt;ちなみに今回作った&lt;a href=&#34;http://takuti.me/dev/binary2decimal2hex/&#34;&gt;さくさく進数相互変換&lt;/a&gt;、無駄に入力スペース広いですが特に何も考えずにparseIntを使って変換しているだけなので、大きすぎる数だとおかしくなったりします。ま、まぁいいよね。&lt;/p&gt;
&lt;h3&gt;追記(2013.08.02)&lt;/h3&gt;
&lt;p&gt;大きすぎて対応できない数の場合には変換処理を行わないように修正しました。&lt;br /&gt;
【参考】&lt;a href=&#34;http://liosk.blog103.fc2.com/blog-entry-197.html&#34;&gt;JavaScript (ECMAScript) の整数の精度と乱数の精度について / LiosK-free Blog&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>はてなキーワードを使ってigo-ruby(MeCab)用の辞書をナウい感じにする</title>
      <link>http://localhost:1313/note/hatena-keyword-to-ipadic/</link>
      <pubDate>Mon, 29 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/note/hatena-keyword-to-ipadic/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://igo.sourceforge.jp/#mecab&#34;&gt;igo-ruby（辞書はMeCabとほぼ同じなのでMeCabのこととして読んでも可）の辞書&lt;/a&gt;はナウくないです。&lt;/p&gt;
&lt;p&gt;「&lt;strong&gt;人工知能&lt;/strong&gt;」を分かち書きすると「&lt;strong&gt;人工　知能&lt;/strong&gt;」になっちゃいます。&lt;br /&gt;
「&lt;strong&gt;ニコニコ動画&lt;/strong&gt;」を分かち書きすると「&lt;strong&gt;ニコニコ　動画&lt;/strong&gt;」になっちゃいます。&lt;br /&gt;
「&lt;strong&gt;IPアドレス&lt;/strong&gt;」を分かち書きすると「&lt;strong&gt;IP　アドレス&lt;/strong&gt;」になっちゃいます。&lt;br /&gt;
「&lt;strong&gt;ニューラルネットワーク&lt;/strong&gt;」を分かち書きすると「&lt;strong&gt;ニュー　ラ　ル　ネットワーク&lt;/strong&gt;」になっちゃいます。&lt;/p&gt;
&lt;p&gt;形態素解析器の応用例が増えてくる中で必要となるのは、上記で挙げたようなナウいワードを1つの単語として扱ってくれることです。&lt;/p&gt;
&lt;p&gt;例えば&lt;a href=&#34;http://buzztter.com/#/ja&#34;&gt;buzztter&lt;/a&gt;のようなサービスでは、「ニコニコ動画」は「ニコニコ動画」でいて欲しいし、「ニューラルネットワーク」は「ニューラルネットワーク」のままであってほしいわけですね。&lt;/p&gt;
&lt;p&gt;僕も最近ちょっと辞書をナウくする必要が出たので、早速&lt;a href=&#34;http://developer.hatena.ne.jp/ja/documents/keyword/misc/catalog&#34;&gt;公開されているはてなキーワードのデータ&lt;/a&gt;を使ってやってみました。&lt;br /&gt;
&lt;!--more--&gt;&lt;br /&gt;
はてなキーワードのデータから辞書を作るコード（仮）は以下。&lt;br /&gt;
&lt;strong&gt;&lt;a href=&#34;https://github.com/takuti/twitter_bot/blob/master/tool/hatena2dic.rb&#34;&gt;takuti / twitter_bot / tool / hatena2dic.rb&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;はてなキーワードのデータはキーワードそのものとふりがながタブ区切りで各行に書かれているので、それに合わせる形でそれぞれを読んであげる。元データの文字コードはEUC-JP。&lt;/p&gt;
&lt;p&gt;そしてお好みの条件で辞書に加えたくないキーワードなんかも除外する。&lt;br /&gt;
今回は、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2009-09-04&lt;/strong&gt;のような年月日&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1945年&lt;/strong&gt;のような年&lt;/li&gt;
&lt;li&gt;すでに1単語として判断されるもの&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を除外しています。&lt;/p&gt;
&lt;p&gt;ふりがなは&lt;a href=&#34;http://gimite.net/gimite/rubymess/moji.html&#34;&gt;Mojiモジュール&lt;/a&gt;を使ってカタカナ化しています。&lt;/p&gt;
&lt;p&gt;加えて、辞書を作る時に大切なコスト計算もしています。MeCabだとコストに-1を指定すると自動でコストを割り振ってくれるみたいですが、igo-rubyにはそんな機能ありません。&lt;/p&gt;
&lt;p&gt;辞書のコストについては以下を参考にさせていただきました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mwsoft.jp/programming/munou/mecab_nitteretou.html&#34;&gt;日本テレビ東京で学ぶMeCabのコスト計算 | mwSoft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tmp.blogdns.org/archives/2009/12/mecabwikipediah.html&#34;&gt;mecabのユーザ辞書でwikipediaとhatenaキーワードを利用する - てんぷろぐ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mwsoft.jp/programming/munou/mecab_hatena.html&#34;&gt;はてなキーワードからMecCab辞書を生成する（Ruby版）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mecab.googlecode.com/svn/trunk/mecab/doc/dic-detail.html&#34;&gt;MeCab の辞書構造と汎用テキスト変換ツールとしての利用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最終的には2番目のリンク先に記載されていた、&lt;br /&gt;
&lt;strong&gt;score = [-32768.0, (6000 - 200 *(title.size**1.3))].max.to_i&lt;/strong&gt;&lt;br /&gt;
を利用させていただくことに。&lt;/p&gt;
&lt;p&gt;各キーワードの情報はCSVに以下のような形で書き込んで、それを追加用辞書ファイルとする。既存の辞書ファイルの文字コードがすべてEUC-JPなのでこれもEUC-JPで。&lt;/p&gt;
&lt;pre&gt;&lt;strong&gt;#{word}&lt;/strong&gt;,0,0,&lt;strong&gt;#{cost}&lt;/strong&gt;,名詞,一般,*,*,*,*,&lt;strong&gt;#{word}&lt;/strong&gt;,&lt;strong&gt;#{furigana}&lt;/strong&gt;,&lt;strong&gt;#{furigana}&lt;/strong&gt;&lt;/pre&gt;
&lt;p&gt;最後に、追加用辞書ファイルをディレクトリ &lt;strong&gt;mecab-ipadic-2.7.0-20070801&lt;/strong&gt; 内に移動して、あとは通常の辞書生成と同じようにコマンドを叩いて終わり。&lt;/p&gt;
&lt;pre&gt;java -Xmx1024m -cp igo-0.4.5.jar net.reduls.igo.bin.BuildDic ipadic mecab-ipadic-2.7.0-20070801 EUC-JP&lt;/pre&gt;
&lt;p&gt;これで生成された辞書を使って形態素解析なんかを行えば、「人工知能」は「人工知能」のままで、「ニコニコ動画」は「ニコニコ動画」のままで解釈される！ぱちぱち。&lt;/p&gt;
&lt;h3&gt;問題点&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. カンマを含むキーワードが登録できない&lt;/strong&gt;&lt;br /&gt;
カンマを含むキーワード（「NO MUSIC, NO LIFE.」とか）を今の実装で辞書に登録しようとすると、カンマそのものがCSVの区切り文字と判断されて上手くいきません。&lt;/p&gt;
&lt;p&gt;これはMeCabの場合、そのキーワードをダブルクォーテーションで囲ってあげることで解決できます。&lt;/p&gt;
&lt;p&gt;しかしigo-rubyの場合、&lt;a href=&#34;http://igo.sourceforge.jp/#mecab&#34;&gt;MeCabとの相違点&lt;/a&gt;として挙げられているように、&lt;/p&gt;
&lt;pre&gt;&#34;組打ち&#34;,1285,1285,5622,名詞,一般,*,*,*,*,組打ち,クミウチ,クミウチ
　※ ↑この単語の表層形は、&#39;組打ち&#39;ではなく&#39;&#34;組打ち&#34;&#39;となる&lt;/pre&gt;
&lt;p&gt;と、ダブルクォーテーションそのものも単語の一部として解釈されてしまうらしく、しかしまぁさほど影響は無さそうなので今はカンマを含むキーワードを全てスキップすることで応急処置としています。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 文字コードCP51932の扱い&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Ⅲ&lt;/strong&gt;や&lt;strong&gt;②&lt;/strong&gt;、&lt;strong&gt;㈱&lt;/strong&gt;といった機種依存文字を含むキーワードはデータから読み込んだときの文字コードがCP51932になっています。「東大理Ⅲ」とかですね。&lt;/p&gt;
&lt;p&gt;それらを他のEUC-JPのキーワードと同じように扱うと、「人工知能」は「人工知能」のままになっても、「東大理Ⅲ」なんかは「東大理Ⅲ」のままにはならない。&lt;/p&gt;
&lt;p&gt;困ったのでひとまず保留ということで、文字コードがCP51932のキーワードを全てスキップすることでこちらも応急処置としています。&lt;/p&gt;
&lt;p&gt;CP51932がEUC-JPになればこの問題は解決するの？どうやってそれを確認するの（どうやってCP51932からEUC-JPへの変換を行うの）？&lt;/p&gt;
&lt;p&gt;このあたりに答えを出す必要がありそう。&lt;/p&gt;
&lt;h3&gt;というわけで&lt;/h3&gt;
&lt;p&gt;問題点が残っていて未完成ではありますが、ひとまずある程度辞書がナウい感じになったということでまとめておきます。&lt;/p&gt;
&lt;p&gt;今回ははてなキーワードでしたが、Wikipediaのタイトルでも元データがどんな規則で書かれているかに注意すれば同じ事は簡単にできますね。&lt;br /&gt;
【参考】&lt;a href=&#34;http://www.mwsoft.jp/programming/munou/wikipedia_data_list.html&#34;&gt;Wikipediaのダウンロードできるデータファイル一覧 | mwSoft&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;その他参考にさせていただものは以下です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://aidiary.hatenablog.com/entry/20101230/1293691668&#34;&gt;テキストからWikipedia見出し語を抽出 - 人工知能に関する断創録能に関する断創録&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://takemikami.com/technote/archives/845&#34;&gt;igo-rubyで形態素解析して、twitterの口癖分析もどきしてみた | Lightweight HackingLightweight Hacking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>マルコフ連鎖でTwitter Botをつくりました</title>
      <link>http://localhost:1313/note/twitter-bot/</link>
      <pubDate>Sun, 28 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/note/twitter-bot/</guid>
      <description>&lt;p&gt;ひとまず動けばいいや程度に作りました。 @&lt;a href=&#34;https://twitter.com/yootakuti&#34;&gt;yootakuti&lt;/a&gt; がそれですよろしくおねがいします。&lt;/p&gt;
&lt;p&gt;Twitter公式から自分の過去ツイート5万弱をダウンロードして、そのCSVから&lt;a href=&#34;https://twitter.com/shuumai&#34;&gt;しゅうまい君&lt;/a&gt;で有名になったマルコフ連鎖（らしきこと）で文章を作ります。それを30分おきに行なって、しゃべります。&lt;/p&gt;
&lt;p&gt;https://twitter.com/yootakuti/status/358134512208715776&lt;/p&gt;
&lt;p&gt;我ながらおもしろい。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;h3&gt;マルコフ連鎖 is 何&lt;/h3&gt;
&lt;p&gt;なんだかついったーbot界（？）では「マルコフ連鎖」というワードばかりが一人歩きしている印象を受けますが、そもそもマルコフ連鎖ってどんなものなんでしょうか。&lt;a href=&#34;http://ja.wikipedia.org/wiki/%E3%83%9E%E3%83%AB%E3%82%B3%E3%83%95%E9%80%A3%E9%8E%96&#34;&gt;Wikipedia先生に聞いてみましょう。&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
マルコフ連鎖は、&lt;strong&gt;未来の挙動が現在の値だけで決定され、過去の挙動と無関係である&lt;/strong&gt;（マルコフ性）。各時刻において起こる状態変化（遷移または推移）に関して、マルコフ連鎖は遷移確率が過去の状態によらず、現在の状態のみによる系列である。
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;ふむふむ。&lt;/p&gt;
&lt;p&gt;そして一般に「マルコフ連鎖でついったーbot」と言われた時にみんながやっているのは（たぶん）下のようなこと。&lt;/p&gt;
&lt;p&gt;まずはツイートひとつひとつを分かち書きする。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;私はヨーグルトが好きです。&lt;/strong&gt;&lt;br /&gt;
を分かち書きすると&lt;br /&gt;
&lt;strong&gt;私　は　ヨーグルト　が　好き　です　。&lt;/strong&gt;&lt;br /&gt;
になる。&lt;/p&gt;
&lt;p&gt;ここから1つずらしながら、3つずつの要素からなる塊を以下のようにたくさんつくる。&lt;/p&gt;
&lt;pre&gt;
（はじまり）　私　は
私　は　ヨーグルト
は　ヨーグルト　が
ヨーグルト　が　好き
が　好き　です
好き　です　。
です　。　（おわり）
&lt;/pre&gt;
&lt;p&gt;これを対象となるすべてのツイートに対して作ってあげる。&lt;/p&gt;
&lt;p&gt;上の「私はヨーグルトが好きです。」の他にもう1つ、「ヨーグルトが嫌いだ」というフレーズに対しても同様に作れば、&lt;/p&gt;
&lt;pre&gt;
（はじまり）　ヨーグルト　が
ヨーグルト　が　嫌い
が　嫌い　だ
嫌い　だ　（おわり）
&lt;/pre&gt;
&lt;p&gt;となる。&lt;/p&gt;
&lt;p&gt;こんな中で、3つの要素の塊をつなげていくのがマルコフ連鎖。&lt;/p&gt;
&lt;p&gt;ちなみに要素3つずつで塊を作っていくのは、Wikipedia先生によるところの「3階マルコフ連鎖」にあたるという認識で大丈夫なのかな。&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;次の状態が現在を含めた過去N個の状態履歴に依存して決まる確率過程を、&lt;strong&gt;N階マルコフ連鎖&lt;/strong&gt;（もしくは、N重マルコフ連鎖、N次マルコフ連鎖）という。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;階数が高いほど元の文章に近づいていって、低いほどめちゃめちゃになる。&lt;/p&gt;
&lt;p&gt;さて、話を戻して「私はヨーグルトが好きです。」「ヨーグルトが嫌いだ」の2つの文章からマルコフ連鎖で新しいツイートを生成してみましょう。&lt;/p&gt;
&lt;p&gt;例えば最初に&lt;br /&gt;
&lt;strong&gt;（はじまり）　私　は&lt;/strong&gt;&lt;br /&gt;
を選んだとしたら、次に来るのは「は」から始まる塊だけ。&lt;br /&gt;
上で作った塊たちの中で、「は」から始まる塊は&lt;br /&gt;
&lt;strong&gt;は　ヨーグルト　が&lt;/strong&gt;&lt;br /&gt;
だけなのでこれを選択。この時点で、「私はヨーグルトが」となる。&lt;/p&gt;
&lt;p&gt;その次に来るのは、先ほどと同様に、今度は「が」から始まる塊だけ。&lt;br /&gt;
候補は、&lt;br /&gt;
&lt;strong&gt;が　好き　です&lt;br /&gt;
が　嫌い　だ&lt;/strong&gt;&lt;br /&gt;
の2つ。このどちらかをランダムで選ぶ。&lt;/p&gt;
&lt;p&gt;上が選ばれれば「私はヨーグルトが好きです」と連鎖するし、下が選ばれれば「私はヨーグルトが嫌いだ」と連鎖して、元々の文とは真逆の意味になっちゃったりして面白い。&lt;/p&gt;
&lt;p&gt;更にこれを&lt;strong&gt;（おわり）&lt;/strong&gt;が来るまで繰り返していくと1つの文章が出来上がるという仕組み。元のツイートが多ければ多いほど3つずつの要素からなる塊はたくさんできて、最終的に生成される文章の幅も広がるというわけですね。&lt;/p&gt;
&lt;p&gt;ここでWikipedia先生の教えに戻ると、マルコフ連鎖とは&lt;strong&gt;未来の挙動が現在の値だけで決定され、過去の挙動と無関係である&lt;/strong&gt;という、マルコフ性と呼ばれる特性に依るものでした。&lt;/p&gt;
&lt;p&gt;つまり、&lt;br /&gt;
&lt;strong&gt;は　ヨーグルト　が&lt;/strong&gt;の次に繋がる塊&lt;em&gt;（＝未来の挙動）&lt;/em&gt;　は&lt;br /&gt;
&lt;strong&gt;は　ヨーグルト　が&lt;/strong&gt;&lt;em&gt;（＝現在の値）&lt;/em&gt;　だけで決定され、&lt;br /&gt;
&lt;strong&gt;（はじまり）　私　は&lt;/strong&gt;&lt;em&gt;（＝過去の挙動）&lt;/em&gt;　と無関係である。&lt;br /&gt;
ということ、なのかな・・・？&lt;/p&gt;
&lt;p&gt;もし過去の挙動を見ていれば、どれだけ塊がたくさんあったとしても、「私はヨーグルトが」と始まってしまったら「私はヨーグルトが好きです」しかできあがらない。過去の挙動を無視するから、既存のツイートから新しいツイートが生み出せる。&lt;/p&gt;
&lt;p&gt;というわけで、「マルコフ連鎖でついったーbot」なんだなぁと僕は解釈しました。しかしこのあたり、なんだかスッキリしないのでもっと理論的な話を近いうちに勉強できればと思います。&lt;/p&gt;
&lt;p&gt;ここまでで何か間違いがあれば指摘していただけると嬉しいです。&lt;/p&gt;
&lt;h3&gt;実装の話&lt;/h3&gt;
&lt;p&gt;実装にあたり以下を参考にさせていただきました。コード面では、リプライのツイートに含まれるID（@なんちゃら）やRT/QT以降の文章、URLを除外する部分のみ参考にさせていただき、あとは上で書いたマルコフ連鎖をそのまま強引に自力で。&lt;/p&gt;
&lt;p&gt;【参考】&lt;a href=&#34;http://d.hatena.ne.jp/tondol/20120311/1331470586&#34;&gt;マルコフ連鎖でTwitter BOTを作る - FLYING&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;このほかに、CSVの読み込みに関して以下を参考にさせていただきました。確かに最強な感じある。&lt;br /&gt;
【参考】&lt;a href=&#34;http://melborne.github.io/2013/01/24/csv-table-method-is-awesome/&#34;&gt;Ruby標準添付ライブラリcsvのCSV.tableメソッドが最強な件について&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;実際に今 @&lt;a href=&#34;https://twitter.com/yootakuti&#34;&gt;yootakuti&lt;/a&gt; で動いてるものは以下より。&lt;br /&gt;
&lt;strong&gt;&lt;a href=&#34;https://github.com/takuti/twitter_bot&#34;&gt;takuti/twitter_bot&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;改善すべき点は多々ありますがとりあえず動けばいいやーな気持ちです。徐々に改善して行く予定です。しかし予定は未定です。&lt;/p&gt;
&lt;p&gt;これをさくらのVPS上でcrontabから30分に一度回してあげればオーケイ。このとき、ローカル(Mac)では問題なかったのですが、さくらVPS上だと文字コード関係で怒られるので &lt;em&gt;ruby&lt;/em&gt; のオプションに &lt;em&gt;-Ku&lt;/em&gt; を付けてあげます。&lt;br /&gt;
【参考】&lt;a href=&#34;http://horahora.cocolog-nifty.com/blog/2011/06/ruby-my-dear-1-.html&#34;&gt;Ruby, My Dear? (1) 日本語処理でハマる: ほらかわブログ&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;botたのしい&lt;/h3&gt;
&lt;p&gt;http://twitter.com/takuti/status/13602515900&lt;br /&gt;
4年も前から同じような仕組みでしゅうまい君は動いてるっていうんだから、すごいですね。&lt;/p&gt;
&lt;p&gt;前々から作ってみたかったついったーbotですが、実際に作ってみるとやっぱり面白いし可愛いですね。&lt;/p&gt;
&lt;p&gt;そんなわけで、 @&lt;a href=&#34;https://twitter.com/yootakuti&#34;&gt;yootakuti&lt;/a&gt; よろしくおねがいします。（再）&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>はじめてのChrome拡張開発は進数変換とRGB/カラーコード変換ができるやつ</title>
      <link>http://localhost:1313/note/hello-chrome-extension/</link>
      <pubDate>Sat, 27 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/note/hello-chrome-extension/</guid>
      <description>&lt;p&gt;思っている以上に簡単だとか、&lt;a href=&#34;http://takuti.hatenablog.com/entry/20111002/1317563321&#34;&gt;JSを書きたければChrome拡張をつくろう！&lt;/a&gt;とか、そんな話を前々から聞きながらもスルーしていたChrome拡張開発をやってみました。&lt;/p&gt;
&lt;p&gt;ほんとに簡単だった。&lt;/p&gt;
&lt;p&gt;自分が実際に使えるものをつくりたかったので、進数変換とRGB/カラーコード変換ができるものをつくることに。&lt;/p&gt;
&lt;p&gt;進数変換は&lt;a href=&#34;http://hogehoge.tk/tool/number.html&#34;&gt;いつも利用させていただいているツール&lt;/a&gt;にその都度いくのが面倒だなーと思っていたこと、RGB/カラーコード変換はCSS編集するときにサクッと相互変換できたら嬉しいなーと常日頃思っていたことが動機です。&lt;/p&gt;
&lt;p&gt;しっかりと調べていないので、上記の要望を満足するChrome拡張がすでに存在するかもしれませんがそんなことは知らない。&lt;/p&gt;
&lt;p&gt;プロトタイプクオリティの完成品は以下のような雰囲気です。い、いつかもっとカッコよくするんだ・・・。&lt;br /&gt;
&lt;img src=&#34;http://localhost:1313/images/wp/chrome_ext.png&#34; alt=&#34;chrome_ext&#34; width=&#34;309&#34; height=&#34;321&#34; class=&#34;alignnone size-full wp-image-219&#34; /&gt;&lt;br /&gt;
&lt;!--more--&gt;&lt;br /&gt;
作り方はみんな大好きドットインストールで勉強させていただきました。&lt;br /&gt;
&lt;a href=&#34;http://dotinstall.com/lessons/basic_chrome_v2&#34;&gt;Google Chrome拡張機能入門 (全20回) - プログラミングならドットインストール&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;すごくざっくりなテキトーコードは以下より。&lt;br /&gt;
&lt;strong&gt;&lt;a href=&#34;https://github.com/takuti/conversion_crx&#34;&gt;takuti/conversion_crx&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ちなみに今回つくったChrome拡張ですが、正しくない値を入力して変換しようとするとピヨさん（今考えた）が教えてくれます。（どうでもいい）&lt;br /&gt;
&lt;img src=&#34;http://localhost:1313/images/wp/chrome_ext_err.png&#34; alt=&#34;chrome_ext_err&#34; width=&#34;312&#34; height=&#34;312&#34; class=&#34;alignnone size-full wp-image-220&#34; /&gt;&lt;/p&gt;
&lt;p&gt;ピヨさんは&lt;a href=&#34;http://blog.takuti.me/twitter-bot/&#34;&gt;僕のbot&lt;/a&gt;が考えてくれたこの夏の新作顔文字ですみなさんよろしくおねがいします。&lt;br /&gt;
https://twitter.com/yootakuti/status/355280706269753344&lt;/p&gt;
&lt;p&gt;今回つくったものはショボショボな感じですが、Chrome拡張ってこんなに簡単に作れるんだ！ということを身を持って知れたのが何よりの収穫だったと思います。&lt;/p&gt;
&lt;p&gt;※開発にあたり、以下を利用させていただきました。&lt;br /&gt;
&lt;a href=&#34;http://www.phpied.com/rgb-color-parser-in-javascript/&#34;&gt;RGB color parser in JavaScript / Stoyan&#39;s phpied.com&lt;/a&gt;&lt;br /&gt;
【参考】&lt;a href=&#34;http://tande.jp/lab/2012/07/1849&#34;&gt;[JavaScript] 色表記の変換が簡単なライブラリ rgbcolor.js | tande lab. &lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>さくらVPSにRubyを入れたらSSHで入れなくなった</title>
      <link>http://localhost:1313/note/sakura-vps-ssh-permission/</link>
      <pubDate>Fri, 19 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/note/sakura-vps-ssh-permission/</guid>
      <description>&lt;p&gt;焦った。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://akabeko.me/blog/2012/05/revps-09-ruby-redmine-subversion/#revps-09-01&#34;&gt;さくらのVPS を改めて使いはじめる 9 &amp;#8211; Ruby、Redmine、Subversion | アカベコマイリ&lt;/a&gt;&lt;br /&gt;
ここに従ってRubyをインストールしたら、その直後からSSHでVPSに入れなくなった。&lt;/p&gt;
&lt;p&gt;なんか&lt;br /&gt;
&lt;strong&gt;Permission denied (publickey,gssapi-keyex,gssapi-with-mic).&lt;/strong&gt;&lt;br /&gt;
って出る。怖い。&lt;/p&gt;
&lt;p&gt;しかし理由は単純で、SSHで入ろうとしたユーザのホームディレクトリのパーミッションがおかしくなっていた様子。&lt;br /&gt;
【参考】&lt;a href=&#34;http://cns-guide.sfc.keio.ac.jp/1999/11/4/2.html&#34;&gt;4.2 ホームディレクトリに移動できない&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ので、&lt;a href=&#34;https://secure.sakura.ad.jp/vpscontrol/&#34;&gt;さくらVPSのコントロールパネル&lt;/a&gt;からクソ使いづらいリモートコンソールもしくはVNCコンソールからrootで入って、そのユーザのホームディレクトリをchmodしてあげて解決。&lt;/p&gt;
&lt;p&gt;原因はなんだったんでしょうか・・・。&lt;/p&gt;
&lt;pre&gt;$ sudo yum install openssl-devel readline-devel zlib-devel curl-devel libyaml-devel mysql-devel httpd-devel ImageMagick ImageMagick-devel&lt;/pre&gt;
&lt;p&gt;このときに入れたどれかかなぁ。&lt;/p&gt;
&lt;h3&gt;追記(2013.08.02)&lt;/h3&gt;
&lt;p&gt;この件について詳しく書かれているエントリがありました。chownをしないと、chmodでいくらパーミッションを変えてもSFTPでPermission Deniedになるなどの状態が続きます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.ao-oni.net/sakura-vps-006/&#34;&gt;青鬼 | さくらVPS Ruby Redmine Subversion&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>