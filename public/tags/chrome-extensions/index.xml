<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chrome Extensions on takuti.me</title>
    <link>http://localhost:1313/tags/chrome-extensions/</link>
    <description>Recent content in Chrome Extensions on takuti.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 15 Nov 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/chrome-extensions/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>AngularJSでChromeExtension開発をするならCSPに気をつけよう</title>
      <link>http://localhost:1313/note/crx-dev-using-angularjs/</link>
      <pubDate>Fri, 15 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/note/crx-dev-using-angularjs/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.takuti.me/hello-chrome-extension/&#34;&gt;初めてのChromeExtensionを作った&lt;/a&gt;後に&lt;a href=&#34;http://blog.takuti.me/hello-angularjs/&#34;&gt;AngularJSに触れて&lt;/a&gt;、最初は&lt;strong&gt;「ChromeExtensionをAngularJS使って作ることができたらChromeの右上ライフが捗る！？」&lt;/strong&gt;なんて思って試したわけですが、何故かAngularJSが動かず諦めていました。&lt;/p&gt;
&lt;p&gt;それを最近ふと思い出したので調べてみたら、ChromeExtensionの&lt;strong&gt;CSP&lt;/strong&gt;  (&lt;strong&gt;C&lt;/strong&gt;ontent &lt;strong&gt;S&lt;/strong&gt;ecurity &lt;strong&gt;P&lt;/strong&gt;olicy) が原因だったことがあっさりと分かって解決したのでメモ。&lt;/p&gt;
&lt;h3&gt;結論&lt;/h3&gt;
&lt;p&gt;AngularJSでChromeExtension開発をするためにやるべきことは以下の2つ。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ng-appの横にng-cspと書いてあげる&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.angularjs.org/snapshot/angular-csp.css&#34;&gt;angular-csp.css&lt;/a&gt;をローカルに持ってきてロードしてあげる&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下詳細。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;h3&gt;CSP (Content Security Policy) とは&lt;/h3&gt;
&lt;p&gt;すごーくざっくりと言えば、XSSをはじめとする&lt;strong&gt;攻撃に利用されそうな機能に対して与える制限&lt;/strong&gt;のこと。&lt;/p&gt;
&lt;p&gt;そのような機能の分かりやすい例としては&lt;strong&gt;eval()&lt;/strong&gt;でしょう。ご存知の通りevalは与えられた文字列をソースとしてなんでもかんでも解釈・実行してしまうため、脆弱性があった際に与える影響は絶大です。&lt;/p&gt;
&lt;div class=&#34;booklink-box&#34; style=&#34;text-align:left;padding-bottom:20px;font-size:small;/zoom: 1;overflow: hidden;&#34;&gt;
&lt;div class=&#34;booklink-image&#34; style=&#34;float:left;margin:0 15px 10px 0;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/asin/4797361190/takuti-22/&#34; name=&#34;booklink&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/41lX6Fg5KpL._SL160_.jpg&#34; style=&#34;border: none;&#34; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&#34;booklink-info&#34; style=&#34;line-height:120%;/zoom: 1;overflow: hidden;&#34;&gt;
&lt;div class=&#34;booklink-name&#34; style=&#34;margin-bottom:10px;line-height:120%&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/asin/4797361190/takuti-22/&#34; rel=&#34;nofollow&#34; name=&#34;booklink&#34; target=&#34;_blank&#34;&gt;体系的に学ぶ 安全なWebアプリケーションの作り方　脆弱性が生まれる原理と対策の実践&lt;/a&gt;
&lt;div class=&#34;booklink-powered-date&#34; style=&#34;font-size:8pt;margin-top:5px;font-family:verdana;line-height:120%&#34;&gt;posted with &lt;a href=&#34;http://yomereba.com&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34;&gt;ヨメレバ&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;booklink-detail&#34; style=&#34;margin-bottom:5px;&#34;&gt;徳丸 浩 ソフトバンククリエイティブ 2011-03-03    &lt;/div&gt;
&lt;div class=&#34;booklink-link2&#34; style=&#34;margin-top:10px;&#34;&gt;
&lt;div class=&#34;shoplinkamazon&#34; style=&#34;display:inline;margin-right:5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/asin/4797361190/takuti-22/&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34; title=&#34;アマゾン&#34; &gt;Amazon&lt;/a&gt;&lt;/div&gt;
&lt;div class=&#34;shoplinkkindle&#34; style=&#34;display:inline;margin-right:5px&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/B00E5TJ120/takuti-22/&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34; &gt;Kindle&lt;/a&gt;&lt;/div&gt;
&lt;div class=&#34;shoplinkrakuten&#34; style=&#34;display:inline;margin-right:5px&#34;&gt;&lt;a href=&#34;http://hb.afl.rakuten.co.jp/hgc/10952997.eae88ca3.10952998.38cdd415/?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F6994894%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F&#34; rel=&#34;nofollow&#34; target=&#34;_blank&#34; title=&#34;楽天ブックス&#34; &gt;楽天ブックス&lt;/a&gt;&lt;/div&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;booklink-footer&#34; style=&#34;clear: left&#34;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;evalを使おう！とあなたが思った時、それは他の機能で代替可能ですので思い止まりましょう。というわけで、CSPでeval相当の記述を全て禁止にすることができたりするわけです。&lt;/p&gt;
&lt;h3&gt;ChromeExtensionのCSPとAngularJSの使い方&lt;/h3&gt;
&lt;p&gt;ChromeExtensionでは、CSPがデフォルトで設定されています。&lt;br /&gt;
&lt;a href=&#34;http://developer.chrome.com/extensions/contentSecurityPolicy.html&#34;&gt;Content Security Policy (CSP) - Google Chrome&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;設定されている制限の内容は、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;evalとそれに相当する記述の無効化&lt;/li&gt;
&lt;li&gt;インライン（HTMLに埋め込む形）でのJavaScript実行の禁止&lt;/li&gt;
&lt;li&gt;スクリプトファイルやその他リソースファイルの読み込みはローカルからのみ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の3つ。&lt;/p&gt;
&lt;p&gt;AngularJSでは実行速度向上のためにeval相当の記述を利用している箇所があり、そこがChromeExtensionのCSPに引っかかっているのです。10041行目(angular.js v1.2.0)から定義されているgetterFn関数です。これがChromeExtensionでAngularJSが動かなかった原因。&lt;/p&gt;
&lt;p&gt;そして、この問題への対処法は&lt;a href=&#34;http://docs.angularjs.org/api/ng.directive:ngCsp&#34;&gt;AngularJS公式で用意されています&lt;/a&gt;。やり方は&lt;strong&gt;ng-appと一緒にng-cspと書いてあげるだけ&lt;/strong&gt;。&lt;/p&gt;
&lt;pre class=&#34;prettyprint lang-html&#34;&gt;
&amp;lt;html lang=&amp;quot;ja&amp;quot; ng-app ng-csp&amp;gt;
&lt;/pre&gt;
&lt;p&gt;これで、AngularJSが実行速度向上を諦めるモードになります。そんなわけですべての式の評価にかかる速度が30%減になってしまうようですが、仕方ない。&lt;/p&gt;
&lt;p&gt;しかしどうやら30%の速度だけでは等価交換にならなかったようで、CSPによって影響を受けたままのものがまだあります。それはCSSの一部。&lt;/p&gt;
&lt;p&gt;angular.js(v1.2.0)の最下部では、AngularJSの導入に伴って必要となるCSSをまとめてjQueryでhead要素の先頭に埋め込んでいます。これは例えばバリデーション時に表示するエラーメッセージのhidden制御なんかが関係してくる。&lt;/p&gt;
&lt;p&gt;その処理がChromeExtensionのCSPの1つ「インラインでのJavaScript実行の禁止」に引っかかってしまい、必要なCSSが埋め込まれない問題が発生します。実際、ng-cspを付けるだけだとバリデーションの結果に関係なくエラーメッセージが表示され続けます。&lt;/p&gt;
&lt;p&gt;これを解決するには、jQueryを使って埋め込んでいたCSSを全て1つのCSSファイルにまとめて&lt;strong&gt;ローカルから&lt;/strong&gt;ロードしてあげる必要があるのです。&lt;/p&gt;
&lt;p&gt;ロードすべきCSSファイルは公式でも公開しています。&lt;br /&gt;
&lt;a href=&#34;http://code.angularjs.org/snapshot/angular-csp.css&#34;&gt;angular-csp.css&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ここまでやって初めて、ChromeExtension上でAngularJSが問題なく動くようになります。（ぱちぱち&lt;/p&gt;
&lt;h3&gt;へんかんくん v0.2.0 が生まれました&lt;/h3&gt;
&lt;p&gt;以上、AngularJSでChromeExtension開発をした時のメモでした。&lt;/p&gt;
&lt;p&gt;僕が何をしたかったかと言うと、&lt;a href=&#34;http://blog.takuti.me/hello-chrome-extension/&#34;&gt;初めて作ったChromeExtension&lt;/a&gt;のリニューアルです。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/wp/num.png&#34; alt=&#34;num&#34; width=&#34;309&#34; height=&#34;239&#34; class=&#34;alignnone size-full wp-image-282&#34; /&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/takuti/conversion_crx&#34;&gt;takuti/conversion_crx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTMLエスケープ機能が追加されて、名前は「しんすうへんかんくん」から「へんかんくん」になりました。僕のChromeの右上ライフが捗ります。それだけ。&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;p&gt;&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/25492209&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&#34; allowfullscreen&gt; &lt;/iframe&gt;&lt;/p&gt;
&lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;https://www.slideshare.net/benlau/making-chrome-extension-with-angularjs&#34; title=&#34;Making Chrome Extension with AngularJS&#34; target=&#34;_blank&#34;&gt;Making Chrome Extension with AngularJS&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;http://www.slideshare.net/benlau&#34; target=&#34;_blank&#34;&gt;Ben Lau&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>はじめてのChrome拡張開発は進数変換とRGB/カラーコード変換ができるやつ</title>
      <link>http://localhost:1313/note/hello-chrome-extension/</link>
      <pubDate>Sat, 27 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/note/hello-chrome-extension/</guid>
      <description>&lt;p&gt;思っている以上に簡単だとか、&lt;a href=&#34;http://takuti.hatenablog.com/entry/20111002/1317563321&#34;&gt;JSを書きたければChrome拡張をつくろう！&lt;/a&gt;とか、そんな話を前々から聞きながらもスルーしていたChrome拡張開発をやってみました。&lt;/p&gt;
&lt;p&gt;ほんとに簡単だった。&lt;/p&gt;
&lt;p&gt;自分が実際に使えるものをつくりたかったので、進数変換とRGB/カラーコード変換ができるものをつくることに。&lt;/p&gt;
&lt;p&gt;進数変換は&lt;a href=&#34;http://hogehoge.tk/tool/number.html&#34;&gt;いつも利用させていただいているツール&lt;/a&gt;にその都度いくのが面倒だなーと思っていたこと、RGB/カラーコード変換はCSS編集するときにサクッと相互変換できたら嬉しいなーと常日頃思っていたことが動機です。&lt;/p&gt;
&lt;p&gt;しっかりと調べていないので、上記の要望を満足するChrome拡張がすでに存在するかもしれませんがそんなことは知らない。&lt;/p&gt;
&lt;p&gt;プロトタイプクオリティの完成品は以下のような雰囲気です。い、いつかもっとカッコよくするんだ・・・。&lt;br /&gt;
&lt;img src=&#34;http://localhost:1313/images/wp/chrome_ext.png&#34; alt=&#34;chrome_ext&#34; width=&#34;309&#34; height=&#34;321&#34; class=&#34;alignnone size-full wp-image-219&#34; /&gt;&lt;br /&gt;
&lt;!--more--&gt;&lt;br /&gt;
作り方はみんな大好きドットインストールで勉強させていただきました。&lt;br /&gt;
&lt;a href=&#34;http://dotinstall.com/lessons/basic_chrome_v2&#34;&gt;Google Chrome拡張機能入門 (全20回) - プログラミングならドットインストール&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;すごくざっくりなテキトーコードは以下より。&lt;br /&gt;
&lt;strong&gt;&lt;a href=&#34;https://github.com/takuti/conversion_crx&#34;&gt;takuti/conversion_crx&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ちなみに今回つくったChrome拡張ですが、正しくない値を入力して変換しようとするとピヨさん（今考えた）が教えてくれます。（どうでもいい）&lt;br /&gt;
&lt;img src=&#34;http://localhost:1313/images/wp/chrome_ext_err.png&#34; alt=&#34;chrome_ext_err&#34; width=&#34;312&#34; height=&#34;312&#34; class=&#34;alignnone size-full wp-image-220&#34; /&gt;&lt;/p&gt;
&lt;p&gt;ピヨさんは&lt;a href=&#34;http://blog.takuti.me/twitter-bot/&#34;&gt;僕のbot&lt;/a&gt;が考えてくれたこの夏の新作顔文字ですみなさんよろしくおねがいします。&lt;br /&gt;
https://twitter.com/yootakuti/status/355280706269753344&lt;/p&gt;
&lt;p&gt;今回つくったものはショボショボな感じですが、Chrome拡張ってこんなに簡単に作れるんだ！ということを身を持って知れたのが何よりの収穫だったと思います。&lt;/p&gt;
&lt;p&gt;※開発にあたり、以下を利用させていただきました。&lt;br /&gt;
&lt;a href=&#34;http://www.phpied.com/rgb-color-parser-in-javascript/&#34;&gt;RGB color parser in JavaScript / Stoyan&#39;s phpied.com&lt;/a&gt;&lt;br /&gt;
【参考】&lt;a href=&#34;http://tande.jp/lab/2012/07/1849&#34;&gt;[JavaScript] 色表記の変換が簡単なライブラリ rgbcolor.js | tande lab. &lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>